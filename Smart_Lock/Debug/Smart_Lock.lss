
Smart_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00003570  00003604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080016a  0080016a  0000370e  2**0
                  ALLOC
  3 .stab         0000333c  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000185a  00000000  00000000  00006a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000082a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00008446  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00008636  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000aa42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000bdb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cf94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000d154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000d447  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__vector_4>
      14:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_5>
      18:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_6>
      1c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_7>
      20:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_8>
      24:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_9>
      28:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_10>
      2c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__vector_13>
      38:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 19 	call	0x3274	; 0x3274 <main>
      8a:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <TIMER0_VoidInit>:
#include "../Header/Timer_Interface.h"

static void (*pvCallBackFuncs[NumberOfINTs])(void)= {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL} ;

void TIMER0_VoidInit(u8 TIMER0_MODE)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
/********************************Normal MODE*************************************************/
	if(TIMER0_MODE == TIMER0_NormalMode)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8e 36       	cpi	r24, 0x6E	; 110
     e08:	21 f5       	brne	.+72     	; 0xe52 <TIMER0_VoidInit+0x5a>
	{

	/*SET WGM */
	Clear_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     e0a:	a3 e5       	ldi	r26, 0x53	; 83
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e3 e5       	ldi	r30, 0x53	; 83
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	8c 93       	st	X, r24
	Clear_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     e18:	a3 e5       	ldi	r26, 0x53	; 83
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e3 e5       	ldi	r30, 0x53	; 83
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	87 7f       	andi	r24, 0xF7	; 247
     e24:	8c 93       	st	X, r24

		TIMER0_TCCR0	&=	PRESCALER_MASK	;
		TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
	#elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

			TIMER0_TCCR0	&=	PRESCALER_MASK	;
     e26:	a3 e5       	ldi	r26, 0x53	; 83
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e3 e5       	ldi	r30, 0x53	; 83
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 7f       	andi	r24, 0xF8	; 248
     e32:	8c 93       	st	X, r24
			TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     e34:	a3 e5       	ldi	r26, 0x53	; 83
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e3 e5       	ldi	r30, 0x53	; 83
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	8c 93       	st	X, r24

			TIMER0_TCCR0	&=	PRESCALER_MASK	;
			TIMER0_TCCR0	|=	TIMER0_PRESCALER_Rising	;
	#endif
	/*Enable Interrupt*/
		Set_Bit(TIMER0_TIMSK,TIMSK_TOIE0);
     e42:	a9 e5       	ldi	r26, 0x59	; 89
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e9 e5       	ldi	r30, 0x59	; 89
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	8c 93       	st	X, r24
     e50:	74 c0       	rjmp	.+232    	; 0xf3a <TIMER0_VoidInit+0x142>
	}
/********************************FAST PWM*************************************************/
	else if (TIMER0_MODE == TIMER0_FastPWMMode)	//TO use this mode PIN OC0 Must be defined as OUTPUT in APP
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	81 37       	cpi	r24, 0x71	; 113
     e56:	59 f5       	brne	.+86     	; 0xeae <TIMER0_VoidInit+0xb6>
	{
		/*SET WGM*/
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 64       	ori	r24, 0x40	; 64
     e64:	8c 93       	st	X, r24
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     e66:	a3 e5       	ldi	r26, 0x53	; 83
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e3 e5       	ldi	r30, 0x53	; 83
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 60       	ori	r24, 0x08	; 8
     e72:	8c 93       	st	X, r24
			Clear_Bit(TIMER0_TCCR0,TCCR0_COM01);
		#elif 	TIMER0_CompareOutputMode == TIMER0_CompareModeFastPWMInverted
			Set_Bit(TIMER0_TCCR0,TCCR0_COM00);
			Set_Bit(TIMER0_TCCR0,TCCR0_COM01);
		#elif 	TIMER0_CompareOutputMode == TIMER0_CompareModeFastPWMNonInverted
			Clear_Bit(TIMER0_TCCR0,TCCR0_COM00);
     e74:	a3 e5       	ldi	r26, 0x53	; 83
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e3 e5       	ldi	r30, 0x53	; 83
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7e       	andi	r24, 0xEF	; 239
     e80:	8c 93       	st	X, r24
			Set_Bit(TIMER0_TCCR0,TCCR0_COM01);
     e82:	a3 e5       	ldi	r26, 0x53	; 83
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e3 e5       	ldi	r30, 0x53	; 83
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 62       	ori	r24, 0x20	; 32
     e8e:	8c 93       	st	X, r24

	    	TIMER0_TCCR0	&=	PRESCALER_MASK	;
	    	TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
	    #elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

	    		TIMER0_TCCR0	&=	PRESCALER_MASK	;
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 7f       	andi	r24, 0xF8	; 248
     e9c:	8c 93       	st	X, r24
	    		TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	8c 93       	st	X, r24
     eac:	46 c0       	rjmp	.+140    	; 0xf3a <TIMER0_VoidInit+0x142>
	    #endif


	}
/*********************************PWM Phase Correct****************************************/
	else if (TIMER0_MODE	==	TIMER0_PWMPhaseCorrectMode)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	80 37       	cpi	r24, 0x70	; 112
     eb2:	e9 f4       	brne	.+58     	; 0xeee <TIMER0_VoidInit+0xf6>
	{
		/*SET WGM*/
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     eb4:	a3 e5       	ldi	r26, 0x53	; 83
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e3 e5       	ldi	r30, 0x53	; 83
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 64       	ori	r24, 0x40	; 64
     ec0:	8c 93       	st	X, r24
		Clear_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	8c 93       	st	X, r24

	    	TIMER0_TCCR0	&=	PRESCALER_MASK	;
	    	TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
	    #elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

	    		TIMER0_TCCR0	&=	PRESCALER_MASK	;
     ed0:	a3 e5       	ldi	r26, 0x53	; 83
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e3 e5       	ldi	r30, 0x53	; 83
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	88 7f       	andi	r24, 0xF8	; 248
     edc:	8c 93       	st	X, r24
	    		TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	8c 93       	st	X, r24
     eec:	26 c0       	rjmp	.+76     	; 0xf3a <TIMER0_VoidInit+0x142>
	    		TIMER0_TCCR0	|=	TIMER0_PRESCALER_Rising	;
	    #endif

	}
/***********************************CTC MODE***********************************************/
	else if (TIMER0_MODE	==	TIMER0_CTCMode)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 36       	cpi	r24, 0x6F	; 111
     ef2:	19 f5       	brne	.+70     	; 0xf3a <TIMER0_VoidInit+0x142>
	{
		/*SET WGM*/
		Clear_Bit(TIMER0_TCCR0,TCCR0_WGM00);
     ef4:	a3 e5       	ldi	r26, 0x53	; 83
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e3 e5       	ldi	r30, 0x53	; 83
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 7b       	andi	r24, 0xBF	; 191
     f00:	8c 93       	st	X, r24
		Set_Bit(TIMER0_TCCR0,TCCR0_WGM01);
     f02:	a3 e5       	ldi	r26, 0x53	; 83
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e3 e5       	ldi	r30, 0x53	; 83
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	8c 93       	st	X, r24

			TIMER0_TCCR0	&=	PRESCALER_MASK	;
			TIMER0_TCCR0	|=	TIMER0_PRESCALER_NoPS	;
		#elif	TIMER0_PRESCALER_MODE	== TIMER0_PRESCALER_8

				TIMER0_TCCR0	&=	PRESCALER_MASK	;
     f10:	a3 e5       	ldi	r26, 0x53	; 83
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e5       	ldi	r30, 0x53	; 83
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 7f       	andi	r24, 0xF8	; 248
     f1c:	8c 93       	st	X, r24
				TIMER0_TCCR0	|=	TIMER0_PRESCALER_8	;
     f1e:	a3 e5       	ldi	r26, 0x53	; 83
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8c 93       	st	X, r24

				TIMER0_TCCR0	&=	PRESCALER_MASK	;
				TIMER0_TCCR0	|=	TIMER0_PRESCALER_Rising	;
		#endif
	/*Enable Interrupt*/
	Set_Bit(TIMER0_TIMSK,TIMSK_OCIE0);
     f2c:	a9 e5       	ldi	r26, 0x59	; 89
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e9 e5       	ldi	r30, 0x59	; 89
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	82 60       	ori	r24, 0x02	; 2
     f38:	8c 93       	st	X, r24
	}
}
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <TIMER1_VoidInit>:

void TIMER1_VoidInit(u8 TIMER1_MODE)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
	if (TIMER1_MODE 	==	TIMER1_NormalMode)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 f5       	brne	.+100    	; 0xfb8 <TIMER1_VoidInit+0x76>
	{
		/*SET WGM*/
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
     f54:	af e4       	ldi	r26, 0x4F	; 79
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ef e4       	ldi	r30, 0x4F	; 79
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
     f62:	af e4       	ldi	r26, 0x4F	; 79
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ef e4       	ldi	r30, 0x4F	; 79
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8d 7f       	andi	r24, 0xFD	; 253
     f6e:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
     f70:	ae e4       	ldi	r26, 0x4E	; 78
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee e4       	ldi	r30, 0x4E	; 78
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
     f7e:	ae e4       	ldi	r26, 0x4E	; 78
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ee e4       	ldi	r30, 0x4E	; 78
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7e       	andi	r24, 0xEF	; 239
     f8a:	8c 93       	st	X, r24

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
	#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
     f8c:	ae e4       	ldi	r26, 0x4E	; 78
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ee e4       	ldi	r30, 0x4E	; 78
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 7f       	andi	r24, 0xF8	; 248
     f98:	8c 93       	st	X, r24
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
     f9a:	ae e4       	ldi	r26, 0x4E	; 78
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ee e4       	ldi	r30, 0x4E	; 78
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	82 60       	ori	r24, 0x02	; 2
     fa6:	8c 93       	st	X, r24

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
	#endif
		/*Enable Interrupt*/
		Set_Bit(TIMER1_TIMSK,TIMSK_TOIE1);
     fa8:	a9 e5       	ldi	r26, 0x59	; 89
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e9 e5       	ldi	r30, 0x59	; 89
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	84 60       	ori	r24, 0x04	; 4
     fb4:	8c 93       	st	X, r24
     fb6:	a5 c0       	rjmp	.+330    	; 0x1102 <TIMER1_VoidInit+0x1c0>
	}
	else if (TIMER1_MODE == TIMER1_FastPWMOnICR1Mode)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	8d 30       	cpi	r24, 0x0D	; 13
     fbc:	c9 f5       	brne	.+114    	; 0x1030 <TIMER1_VoidInit+0xee>
	{
		/*To Use this function PIN OC1A/OC1B MUST be connected as output
		 AND ICR1 Value must be set to a value using function	TIMER1_VoidSetICRValue(u16 Value)	 */

		/*SET WGM*/
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
     fbe:	af e4       	ldi	r26, 0x4F	; 79
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ef e4       	ldi	r30, 0x4F	; 79
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
     fcc:	af e4       	ldi	r26, 0x4F	; 79
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ef e4       	ldi	r30, 0x4F	; 79
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	82 60       	ori	r24, 0x02	; 2
     fd8:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
     fda:	ae e4       	ldi	r26, 0x4E	; 78
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ee e4       	ldi	r30, 0x4E	; 78
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 60       	ori	r24, 0x08	; 8
     fe6:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
     fe8:	ae e4       	ldi	r26, 0x4E	; 78
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ee e4       	ldi	r30, 0x4E	; 78
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 61       	ori	r24, 0x10	; 16
     ff4:	8c 93       	st	X, r24
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_COM1B1);
		#elif 	TIMER1_CompareOutputMode == TIMER1_CompareModeFastPWMInvertedChannelB
			Set_Bit(TIMER1_TCCR1A,TCCR1A_COM1B0);
			Set_Bit(TIMER1_TCCR1A,TCCR1A_COM1B1);
		#elif 	TIMER1_CompareOutputMode == TIMER1_CompareModeFastPWMNonInvertedChannelB
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_COM1B0);
     ff6:	af e4       	ldi	r26, 0x4F	; 79
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ef e4       	ldi	r30, 0x4F	; 79
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 7e       	andi	r24, 0xEF	; 239
    1002:	8c 93       	st	X, r24
			Set_Bit(TIMER1_TCCR1A,TCCR1A_COM1B1);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 62       	ori	r24, 0x20	; 32
    1010:	8c 93       	st	X, r24

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
	#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
    1012:	ae e4       	ldi	r26, 0x4E	; 78
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ee e4       	ldi	r30, 0x4E	; 78
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 7f       	andi	r24, 0xF8	; 248
    101e:	8c 93       	st	X, r24
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
    1020:	ae e4       	ldi	r26, 0x4E	; 78
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ee e4       	ldi	r30, 0x4E	; 78
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	8c 93       	st	X, r24
    102e:	69 c0       	rjmp	.+210    	; 0x1102 <TIMER1_VoidInit+0x1c0>

			TIMER1_TCCR1B	&=	PRESCALER_MASK	;
			TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
	#endif
	}
	else if (TIMER1_MODE == TIMER1_CTCOnOCR1AMode)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	85 30       	cpi	r24, 0x05	; 5
    1034:	91 f5       	brne	.+100    	; 0x109a <TIMER1_VoidInit+0x158>
	{
		/*OCR1A Value must be set with function TIMER_VoidSetCompareMatchValue	to generate interrupt
		 * when TCNT1 value = OCR1A Value*/

		/*SET WGM*/
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
    1036:	af e4       	ldi	r26, 0x4F	; 79
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ef e4       	ldi	r30, 0x4F	; 79
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8e 7f       	andi	r24, 0xFE	; 254
    1042:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
    1044:	af e4       	ldi	r26, 0x4F	; 79
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ef e4       	ldi	r30, 0x4F	; 79
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8d 7f       	andi	r24, 0xFD	; 253
    1050:	8c 93       	st	X, r24
		Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
    1052:	ae e4       	ldi	r26, 0x4E	; 78
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e4       	ldi	r30, 0x4E	; 78
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	88 60       	ori	r24, 0x08	; 8
    105e:	8c 93       	st	X, r24
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
    1060:	ae e4       	ldi	r26, 0x4E	; 78
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ee e4       	ldi	r30, 0x4E	; 78
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7e       	andi	r24, 0xEF	; 239
    106c:	8c 93       	st	X, r24

					TIMER1_TCCR1B	&=	PRESCALER_MASK	;
					TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
			#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

					TIMER1_TCCR1B	&=	PRESCALER_MASK	;
    106e:	ae e4       	ldi	r26, 0x4E	; 78
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ee e4       	ldi	r30, 0x4E	; 78
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 7f       	andi	r24, 0xF8	; 248
    107a:	8c 93       	st	X, r24
					TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
    107c:	ae e4       	ldi	r26, 0x4E	; 78
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ee e4       	ldi	r30, 0x4E	; 78
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	82 60       	ori	r24, 0x02	; 2
    1088:	8c 93       	st	X, r24

					TIMER1_TCCR1B	&=	PRESCALER_MASK	;
					TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
			#endif
		/*Enable Interrupt */
			Set_Bit(TIMER1_TIMSK,TIMSK_OCIE1A);
    108a:	a9 e5       	ldi	r26, 0x59	; 89
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e9 e5       	ldi	r30, 0x59	; 89
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 61       	ori	r24, 0x10	; 16
    1096:	8c 93       	st	X, r24
    1098:	34 c0       	rjmp	.+104    	; 0x1102 <TIMER1_VoidInit+0x1c0>
	}
	else if (TIMER1_MODE == TIMER1_CTCOnOCR1BMode)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	8e 30       	cpi	r24, 0x0E	; 14
    109e:	89 f5       	brne	.+98     	; 0x1102 <TIMER1_VoidInit+0x1c0>
		{
		/*OCR1A Value must be set with function TIMER_VoidSetCompareMatchValue	to generate interrupt
		* when TCNT1 value = OCR1A Value*/

			/*SET WGM*/
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM10);
    10a0:	af e4       	ldi	r26, 0x4F	; 79
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ef e4       	ldi	r30, 0x4F	; 79
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8c 93       	st	X, r24
			Clear_Bit(TIMER1_TCCR1A,TCCR1A_WGM11);
    10ae:	af e4       	ldi	r26, 0x4F	; 79
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ef e4       	ldi	r30, 0x4F	; 79
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8d 7f       	andi	r24, 0xFD	; 253
    10ba:	8c 93       	st	X, r24
			Set_Bit(TIMER1_TCCR1B,TCCR1B_WGM12);
    10bc:	ae e4       	ldi	r26, 0x4E	; 78
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ee e4       	ldi	r30, 0x4E	; 78
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 60       	ori	r24, 0x08	; 8
    10c8:	8c 93       	st	X, r24
			Clear_Bit(TIMER1_TCCR1B,TCCR1B_WGM13);
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7e       	andi	r24, 0xEF	; 239
    10d6:	8c 93       	st	X, r24

						TIMER1_TCCR1B	&=	PRESCALER_MASK	;
						TIMER1_TCCR1B	|=	TIMER1_PRESCALER_NoPS	;
				#elif	TIMER1_PRESCALER_MODE	== TIMER1_PRESCALER_8

						TIMER1_TCCR1B	&=	PRESCALER_MASK	;
    10d8:	ae e4       	ldi	r26, 0x4E	; 78
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ee e4       	ldi	r30, 0x4E	; 78
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	88 7f       	andi	r24, 0xF8	; 248
    10e4:	8c 93       	st	X, r24
						TIMER1_TCCR1B	|=	TIMER1_PRESCALER_8	;
    10e6:	ae e4       	ldi	r26, 0x4E	; 78
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ee e4       	ldi	r30, 0x4E	; 78
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	8c 93       	st	X, r24

						TIMER1_TCCR1B	&=	PRESCALER_MASK	;
						TIMER1_TCCR1B	|=	TIMER1_PRESCALER_Rising	;
				#endif
			/*Enable Interrupt */
				Set_Bit(TIMER1_TIMSK,TIMSK_OCIE1B);
    10f4:	a9 e5       	ldi	r26, 0x59	; 89
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e9 e5       	ldi	r30, 0x59	; 89
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 60       	ori	r24, 0x08	; 8
    1100:	8c 93       	st	X, r24
		}

}
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <TIMER_SetCallBackFunc>:


void TIMER_SetCallBackFunc	(u8 INT_ID  , void (*Copy_pvFunc)(void)	)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <TIMER_SetCallBackFunc+0x6>
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	7b 83       	std	Y+3, r23	; 0x03
    111a:	6a 83       	std	Y+2, r22	; 0x02
	if  (	(INT_ID 	== TIMER0_OVFINT)	&&	(Copy_pvFunc	!= 	NULL))
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	88 23       	and	r24, r24
    1120:	59 f4       	brne	.+22     	; 0x1138 <TIMER_SetCallBackFunc+0x2e>
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	39 f0       	breq	.+14     	; 0x1138 <TIMER_SetCallBackFunc+0x2e>
	{
		pvCallBackFuncs[TIMER0_OVFINT]	=	Copy_pvFunc;
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	90 93 6b 01 	sts	0x016B, r25
    1132:	80 93 6a 01 	sts	0x016A, r24
    1136:	61 c0       	rjmp	.+194    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER0_COMPINT)	&& (Copy_pvFunc	!= 	NULL))
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	59 f4       	brne	.+22     	; 0x1154 <TIMER_SetCallBackFunc+0x4a>
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	39 f0       	breq	.+14     	; 0x1154 <TIMER_SetCallBackFunc+0x4a>
	{
		pvCallBackFuncs[TIMER0_COMPINT]	=	Copy_pvFunc;
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	90 93 6d 01 	sts	0x016D, r25
    114e:	80 93 6c 01 	sts	0x016C, r24
    1152:	53 c0       	rjmp	.+166    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_OVFINT)	&& (Copy_pvFunc	!= 	NULL))
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	59 f4       	brne	.+22     	; 0x1170 <TIMER_SetCallBackFunc+0x66>
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	9b 81       	ldd	r25, Y+3	; 0x03
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	39 f0       	breq	.+14     	; 0x1170 <TIMER_SetCallBackFunc+0x66>
	{
		pvCallBackFuncs[TIMER1_OVFINT]	=	Copy_pvFunc;
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	90 93 6f 01 	sts	0x016F, r25
    116a:	80 93 6e 01 	sts	0x016E, r24
    116e:	45 c0       	rjmp	.+138    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_COMPBINT)	&& (Copy_pvFunc	!= 	NULL))
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	59 f4       	brne	.+22     	; 0x118c <TIMER_SetCallBackFunc+0x82>
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	39 f0       	breq	.+14     	; 0x118c <TIMER_SetCallBackFunc+0x82>
	{
		pvCallBackFuncs[TIMER1_COMPBINT]	=	Copy_pvFunc;
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	90 93 71 01 	sts	0x0171, r25
    1186:	80 93 70 01 	sts	0x0170, r24
    118a:	37 c0       	rjmp	.+110    	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_COMPAINT)	&& (Copy_pvFunc	!= 	NULL))
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	59 f4       	brne	.+22     	; 0x11a8 <TIMER_SetCallBackFunc+0x9e>
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	9b 81       	ldd	r25, Y+3	; 0x03
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	39 f0       	breq	.+14     	; 0x11a8 <TIMER_SetCallBackFunc+0x9e>
	{
		pvCallBackFuncs[TIMER1_COMPAINT]	=	Copy_pvFunc;
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	90 93 73 01 	sts	0x0173, r25
    11a2:	80 93 72 01 	sts	0x0172, r24
    11a6:	29 c0       	rjmp	.+82     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER1_CAPTINT)	&& (Copy_pvFunc	!= 	NULL))
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	85 30       	cpi	r24, 0x05	; 5
    11ac:	59 f4       	brne	.+22     	; 0x11c4 <TIMER_SetCallBackFunc+0xba>
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <TIMER_SetCallBackFunc+0xba>
	{
		pvCallBackFuncs[TIMER1_CAPTINT]	=	Copy_pvFunc;
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	90 93 75 01 	sts	0x0175, r25
    11be:	80 93 74 01 	sts	0x0174, r24
    11c2:	1b c0       	rjmp	.+54     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER2_OVFINT)	&& (Copy_pvFunc	!= 	NULL))
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	86 30       	cpi	r24, 0x06	; 6
    11c8:	59 f4       	brne	.+22     	; 0x11e0 <TIMER_SetCallBackFunc+0xd6>
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	9b 81       	ldd	r25, Y+3	; 0x03
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <TIMER_SetCallBackFunc+0xd6>
	{
		pvCallBackFuncs[TIMER2_OVFINT]	=	Copy_pvFunc;
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	90 93 77 01 	sts	0x0177, r25
    11da:	80 93 76 01 	sts	0x0176, r24
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	}
	else if (	(INT_ID 	== TIMER2_COMPINT)	&& (Copy_pvFunc	!= 	NULL))
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	87 30       	cpi	r24, 0x07	; 7
    11e4:	51 f4       	brne	.+20     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	31 f0       	breq	.+12     	; 0x11fa <TIMER_SetCallBackFunc+0xf0>
	{
		pvCallBackFuncs[TIMER2_COMPINT]	=	Copy_pvFunc;
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	90 93 79 01 	sts	0x0179, r25
    11f6:	80 93 78 01 	sts	0x0178, r24
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <TIMER_voidSetPreLoadValue>:




void TIMER_voidSetPreLoadValue	(u8 TIMER_ID , u16 Local_Value)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <TIMER_voidSetPreLoadValue+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <TIMER_voidSetPreLoadValue+0x8>
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	7b 83       	std	Y+3, r23	; 0x03
    1218:	6a 83       	std	Y+2, r22	; 0x02
	switch (TIMER_ID)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3d 83       	std	Y+5, r19	; 0x05
    1222:	2c 83       	std	Y+4, r18	; 0x04
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	71 f0       	breq	.+28     	; 0x124a <TIMER_voidSetPreLoadValue+0x44>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <TIMER_voidSetPreLoadValue+0x52>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	81 f4       	brne	.+32     	; 0x1260 <TIMER_voidSetPreLoadValue+0x5a>
	{
	case TIMER0:	TIMER0_TCNT0	= (u8)Local_Value ;				break;
    1240:	e2 e5       	ldi	r30, 0x52	; 82
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 83       	st	Z, r24
    1248:	0b c0       	rjmp	.+22     	; 0x1260 <TIMER_voidSetPreLoadValue+0x5a>
	case TIMER1:	TIMER1_TCNT1	=	  Local_Value ;				break;
    124a:	ec e4       	ldi	r30, 0x4C	; 76
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <TIMER_voidSetPreLoadValue+0x5a>
	case TIMER2:	TIMER2_TCNT2	= Local_Value ;					break;
    1258:	e4 e4       	ldi	r30, 0x44	; 68
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24

	}
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <TIMER_VoidSetCompareMatchValue>:

void TIMER_VoidSetCompareMatchValue	(u8 TIMER_ID , u16 Local_Value)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <TIMER_VoidSetCompareMatchValue+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <TIMER_VoidSetCompareMatchValue+0x8>
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	7b 83       	std	Y+3, r23	; 0x03
    1282:	6a 83       	std	Y+2, r22	; 0x02
	switch (TIMER_ID)
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3d 83       	std	Y+5, r19	; 0x05
    128c:	2c 83       	std	Y+4, r18	; 0x04
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	91 05       	cpc	r25, r1
    1296:	71 f1       	breq	.+92     	; 0x12f4 <TIMER_VoidSetCompareMatchValue+0x84>
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	23 30       	cpi	r18, 0x03	; 3
    129e:	31 05       	cpc	r19, r1
    12a0:	2c f4       	brge	.+10     	; 0x12ac <TIMER_VoidSetCompareMatchValue+0x3c>
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	61 f0       	breq	.+24     	; 0x12c2 <TIMER_VoidSetCompareMatchValue+0x52>
    12aa:	2e c0       	rjmp	.+92     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
    12ac:	2c 81       	ldd	r18, Y+4	; 0x04
    12ae:	3d 81       	ldd	r19, Y+5	; 0x05
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	89 f0       	breq	.+34     	; 0x12d8 <TIMER_VoidSetCompareMatchValue+0x68>
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	91 05       	cpc	r25, r1
    12be:	99 f0       	breq	.+38     	; 0x12e6 <TIMER_VoidSetCompareMatchValue+0x76>
    12c0:	23 c0       	rjmp	.+70     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		{
		case TIMER0:	if (Local_Value<256 ){TIMER0_OCR0	= Local_Value ;}	break;
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	8f 3f       	cpi	r24, 0xFF	; 255
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <TIMER_VoidSetCompareMatchValue+0x5e>
    12cc:	e8 f4       	brcc	.+58     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
    12ce:	ec e5       	ldi	r30, 0x5C	; 92
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	18 c0       	rjmp	.+48     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		case TIMER1A:	TIMER1_OCR1A=	  Local_Value ;							break;
    12d8:	ea e4       	ldi	r30, 0x4A	; 74
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		case TIMER1B:	TIMER1_OCR1B=	  Local_Value ;							break;
    12e6:	e8 e4       	ldi	r30, 0x48	; 72
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
    12f2:	0a c0       	rjmp	.+20     	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
		case TIMER2:	if (Local_Value<256 ){TIMER2_OCR2	= Local_Value ;}	break;
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	9b 81       	ldd	r25, Y+3	; 0x03
    12f8:	8f 3f       	cpi	r24, 0xFF	; 255
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <TIMER_VoidSetCompareMatchValue+0x90>
    12fe:	20 f4       	brcc	.+8      	; 0x1308 <TIMER_VoidSetCompareMatchValue+0x98>
    1300:	e3 e4       	ldi	r30, 0x43	; 67
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24

		}
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <TIMER_VoidSetPWMDuty>:
void TIMER_VoidSetPWMDuty	(u8 TIMER_ID , u16 Local_Value)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <TIMER_VoidSetPWMDuty+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <TIMER_VoidSetPWMDuty+0x8>
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	7b 83       	std	Y+3, r23	; 0x03
    132a:	6a 83       	std	Y+2, r22	; 0x02
	switch (TIMER_ID)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3d 83       	std	Y+5, r19	; 0x05
    1334:	2c 83       	std	Y+4, r18	; 0x04
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	82 30       	cpi	r24, 0x02	; 2
    133c:	91 05       	cpc	r25, r1
    133e:	71 f1       	breq	.+92     	; 0x139c <TIMER_VoidSetPWMDuty+0x84>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	23 30       	cpi	r18, 0x03	; 3
    1346:	31 05       	cpc	r19, r1
    1348:	2c f4       	brge	.+10     	; 0x1354 <TIMER_VoidSetPWMDuty+0x3c>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	61 f0       	breq	.+24     	; 0x136a <TIMER_VoidSetPWMDuty+0x52>
    1352:	2e c0       	rjmp	.+92     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	23 30       	cpi	r18, 0x03	; 3
    135a:	31 05       	cpc	r19, r1
    135c:	89 f0       	breq	.+34     	; 0x1380 <TIMER_VoidSetPWMDuty+0x68>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	91 05       	cpc	r25, r1
    1366:	99 f0       	breq	.+38     	; 0x138e <TIMER_VoidSetPWMDuty+0x76>
    1368:	23 c0       	rjmp	.+70     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			{
			case TIMER0:	if (Local_Value<256 ){TIMER0_OCR0	= 	  (u8)Local_Value ;}	break;
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	9b 81       	ldd	r25, Y+3	; 0x03
    136e:	8f 3f       	cpi	r24, 0xFF	; 255
    1370:	91 05       	cpc	r25, r1
    1372:	09 f0       	breq	.+2      	; 0x1376 <TIMER_VoidSetPWMDuty+0x5e>
    1374:	e8 f4       	brcc	.+58     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
    1376:	ec e5       	ldi	r30, 0x5C	; 92
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	80 83       	st	Z, r24
    137e:	18 c0       	rjmp	.+48     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			case TIMER1A:	TIMER1_OCR1A=	  Local_Value ;									break;
    1380:	ea e4       	ldi	r30, 0x4A	; 74
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
    138c:	11 c0       	rjmp	.+34     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			case TIMER1B:	TIMER1_OCR1B=	  Local_Value ;									break;
    138e:	e8 e4       	ldi	r30, 0x48	; 72
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	91 83       	std	Z+1, r25	; 0x01
    1398:	80 83       	st	Z, r24
    139a:	0a c0       	rjmp	.+20     	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
			case TIMER2:	if (Local_Value<256 ){TIMER2_OCR2	= 	  Local_Value ;}		break;
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	8f 3f       	cpi	r24, 0xFF	; 255
    13a2:	91 05       	cpc	r25, r1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <TIMER_VoidSetPWMDuty+0x90>
    13a6:	20 f4       	brcc	.+8      	; 0x13b0 <TIMER_VoidSetPWMDuty+0x98>
    13a8:	e3 e4       	ldi	r30, 0x43	; 67
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 83       	st	Z, r24

			}
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <TIMER1_VoidSetICRValue>:
void TIMER1_VoidSetICRValue( u16 Local_u16ICRValue)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <TIMER1_VoidSetICRValue+0x6>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICR1	=	Local_u16ICRValue	;
    13ce:	e6 e4       	ldi	r30, 0x46	; 70
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <ICU_VoidInit>:
void ICU_VoidInit(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	/*Set triggered edge initially to Rising edge*/
	Set_Bit(TIMER1_TCCR1B,TCCR1B_ICES1);
    13ec:	ae e4       	ldi	r26, 0x4E	; 78
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ee e4       	ldi	r30, 0x4E	; 78
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 64       	ori	r24, 0x40	; 64
    13f8:	8c 93       	st	X, r24
	/*Enable input capture interrupt*/
	Set_Bit(TIMER1_TIMSK,TIMSK_TICIE1);
    13fa:	a9 e5       	ldi	r26, 0x59	; 89
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e9 e5       	ldi	r30, 0x59	; 89
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 62       	ori	r24, 0x20	; 32
    1406:	8c 93       	st	X, r24
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <ICU_voidSetInterruptState>:
void ICU_voidSetInterruptState(u8 state)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	0f 92       	push	r0
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
	if(state == Enabled)
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	41 f4       	brne	.+16     	; 0x1430 <ICU_voidSetInterruptState+0x22>
	{
		Set_Bit(TIMER1_TIMSK,TIMSK_TICIE1);
    1420:	a9 e5       	ldi	r26, 0x59	; 89
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e9 e5       	ldi	r30, 0x59	; 89
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 62       	ori	r24, 0x20	; 32
    142c:	8c 93       	st	X, r24
    142e:	0a c0       	rjmp	.+20     	; 0x1444 <ICU_voidSetInterruptState+0x36>
	}
	else if (state == Disabled)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	82 30       	cpi	r24, 0x02	; 2
    1434:	39 f4       	brne	.+14     	; 0x1444 <ICU_voidSetInterruptState+0x36>
	{
		Clear_Bit(TIMER1_TIMSK,TIMSK_TICIE1);
    1436:	a9 e5       	ldi	r26, 0x59	; 89
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e9 e5       	ldi	r30, 0x59	; 89
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 7d       	andi	r24, 0xDF	; 223
    1442:	8c 93       	st	X, r24
	}
}
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <ICU_u16ReadInputCapture>:
u16 ICU_u16ReadInputCapture(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	return TIMER1_ICR1;
    1454:	e6 e4       	ldi	r30, 0x46	; 70
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <ICU_SetEdgeAsTrigger>:
void ICU_SetEdgeAsTrigger(u8 Local_u8Edge)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
	if (Local_u8Edge == ICU_Rising_Edge	)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	41 f4       	brne	.+16     	; 0x1484 <ICU_SetEdgeAsTrigger+0x22>
	{
		Set_Bit(TIMER1_TCCR1B,TCCR1B_ICES1);
    1474:	ae e4       	ldi	r26, 0x4E	; 78
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ee e4       	ldi	r30, 0x4E	; 78
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 64       	ori	r24, 0x40	; 64
    1480:	8c 93       	st	X, r24
    1482:	0a c0       	rjmp	.+20     	; 0x1498 <ICU_SetEdgeAsTrigger+0x36>
	}
	else if (Local_u8Edge 	== ICU_Falling_Edge )
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	39 f4       	brne	.+14     	; 0x1498 <ICU_SetEdgeAsTrigger+0x36>
	{
		Clear_Bit(TIMER1_TCCR1B,TCCR1B_ICES1);
    148a:	ae e4       	ldi	r26, 0x4E	; 78
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ee e4       	ldi	r30, 0x4E	; 78
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8f 7b       	andi	r24, 0xBF	; 191
    1496:	8c 93       	st	X, r24
	}
}
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <__vector_11>:
/******************************ISR Functions*****************************************/
void __vector_11 (void)			__attribute__((signal));
void __vector_11 (void)
 {
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	2f 93       	push	r18
    14ac:	3f 93       	push	r19
    14ae:	4f 93       	push	r20
    14b0:	5f 93       	push	r21
    14b2:	6f 93       	push	r22
    14b4:	7f 93       	push	r23
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	af 93       	push	r26
    14bc:	bf 93       	push	r27
    14be:	ef 93       	push	r30
    14c0:	ff 93       	push	r31
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62

	 if (	(pvCallBackFuncs[TIMER0_OVFINT]	!= NULL) )
    14ca:	80 91 6a 01 	lds	r24, 0x016A
    14ce:	90 91 6b 01 	lds	r25, 0x016B
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <__vector_11+0x40>
	 {
		 pvCallBackFuncs[TIMER0_OVFINT]();
    14d6:	e0 91 6a 01 	lds	r30, 0x016A
    14da:	f0 91 6b 01 	lds	r31, 0x016B
    14de:	09 95       	icall
	 }

 }
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <__vector_10>:
void __vector_10 (void)			__attribute__((signal));
void __vector_10 (void)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	2f 93       	push	r18
    1512:	3f 93       	push	r19
    1514:	4f 93       	push	r20
    1516:	5f 93       	push	r21
    1518:	6f 93       	push	r22
    151a:	7f 93       	push	r23
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	af 93       	push	r26
    1522:	bf 93       	push	r27
    1524:	ef 93       	push	r30
    1526:	ff 93       	push	r31
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER0_COMPINT]	!= NULL) )
    1530:	80 91 6c 01 	lds	r24, 0x016C
    1534:	90 91 6d 01 	lds	r25, 0x016D
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <__vector_10+0x40>
		 {
		 pvCallBackFuncs[TIMER0_COMPINT]();
    153c:	e0 91 6c 01 	lds	r30, 0x016C
    1540:	f0 91 6d 01 	lds	r31, 0x016D
    1544:	09 95       	icall
		 }
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <__vector_9>:
void __vector_9 (void)	__attribute__((signal));
void __vector_9 (void)
{
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_OVFINT]	!= NULL)  )
    1596:	80 91 6e 01 	lds	r24, 0x016E
    159a:	90 91 6f 01 	lds	r25, 0x016F
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	29 f0       	breq	.+10     	; 0x15ac <__vector_9+0x40>
		 {
		 pvCallBackFuncs[TIMER1_OVFINT]();
    15a2:	e0 91 6e 01 	lds	r30, 0x016E
    15a6:	f0 91 6f 01 	lds	r31, 0x016F
    15aa:	09 95       	icall
		 }

}
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	0f 90       	pop	r0
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	0f 90       	pop	r0
    15ce:	1f 90       	pop	r1
    15d0:	18 95       	reti

000015d2 <__vector_8>:
void __vector_8 (void)	__attribute__((signal));
void __vector_8 (void)
{
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	2f 93       	push	r18
    15de:	3f 93       	push	r19
    15e0:	4f 93       	push	r20
    15e2:	5f 93       	push	r21
    15e4:	6f 93       	push	r22
    15e6:	7f 93       	push	r23
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	ef 93       	push	r30
    15f2:	ff 93       	push	r31
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_COMPBINT]	!= NULL)  )
    15fc:	80 91 70 01 	lds	r24, 0x0170
    1600:	90 91 71 01 	lds	r25, 0x0171
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	29 f0       	breq	.+10     	; 0x1612 <__vector_8+0x40>
		 {
		 pvCallBackFuncs[TIMER1_COMPBINT]();
    1608:	e0 91 70 01 	lds	r30, 0x0170
    160c:	f0 91 71 01 	lds	r31, 0x0171
    1610:	09 95       	icall
		 }

}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	bf 91       	pop	r27
    161c:	af 91       	pop	r26
    161e:	9f 91       	pop	r25
    1620:	8f 91       	pop	r24
    1622:	7f 91       	pop	r23
    1624:	6f 91       	pop	r22
    1626:	5f 91       	pop	r21
    1628:	4f 91       	pop	r20
    162a:	3f 91       	pop	r19
    162c:	2f 91       	pop	r18
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_7>:
void __vector_7 (void)	__attribute__((signal));
void __vector_7 (void)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_COMPAINT]	!= NULL)  )
    1662:	80 91 72 01 	lds	r24, 0x0172
    1666:	90 91 73 01 	lds	r25, 0x0173
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	29 f0       	breq	.+10     	; 0x1678 <__vector_7+0x40>
		 {
		 pvCallBackFuncs[TIMER1_COMPAINT]();
    166e:	e0 91 72 01 	lds	r30, 0x0172
    1672:	f0 91 73 01 	lds	r31, 0x0173
    1676:	09 95       	icall
		 }

}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_6>:
void __vector_6 (void)	__attribute__((signal));
void __vector_6 (void)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	2f 93       	push	r18
    16aa:	3f 93       	push	r19
    16ac:	4f 93       	push	r20
    16ae:	5f 93       	push	r21
    16b0:	6f 93       	push	r22
    16b2:	7f 93       	push	r23
    16b4:	8f 93       	push	r24
    16b6:	9f 93       	push	r25
    16b8:	af 93       	push	r26
    16ba:	bf 93       	push	r27
    16bc:	ef 93       	push	r30
    16be:	ff 93       	push	r31
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER1_CAPTINT]	!= NULL)  )
    16c8:	80 91 74 01 	lds	r24, 0x0174
    16cc:	90 91 75 01 	lds	r25, 0x0175
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	29 f0       	breq	.+10     	; 0x16de <__vector_6+0x40>
		 {
		 pvCallBackFuncs[TIMER1_CAPTINT]();
    16d4:	e0 91 74 01 	lds	r30, 0x0174
    16d8:	f0 91 75 01 	lds	r31, 0x0175
    16dc:	09 95       	icall
		 }

}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <__vector_5>:
void __vector_5 (void)	__attribute__((signal));
void __vector_5 (void)
{
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER2_OVFINT]	!= NULL)  )
    172e:	80 91 76 01 	lds	r24, 0x0176
    1732:	90 91 77 01 	lds	r25, 0x0177
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	29 f0       	breq	.+10     	; 0x1744 <__vector_5+0x40>
		 {
		 pvCallBackFuncs[TIMER2_OVFINT]();
    173a:	e0 91 76 01 	lds	r30, 0x0176
    173e:	f0 91 77 01 	lds	r31, 0x0177
    1742:	09 95       	icall
		 }

}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	ff 91       	pop	r31
    174a:	ef 91       	pop	r30
    174c:	bf 91       	pop	r27
    174e:	af 91       	pop	r26
    1750:	9f 91       	pop	r25
    1752:	8f 91       	pop	r24
    1754:	7f 91       	pop	r23
    1756:	6f 91       	pop	r22
    1758:	5f 91       	pop	r21
    175a:	4f 91       	pop	r20
    175c:	3f 91       	pop	r19
    175e:	2f 91       	pop	r18
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	0f 90       	pop	r0
    1766:	1f 90       	pop	r1
    1768:	18 95       	reti

0000176a <__vector_4>:
void __vector_4 (void)	__attribute__((signal));
void __vector_4 (void)
{
    176a:	1f 92       	push	r1
    176c:	0f 92       	push	r0
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	2f 93       	push	r18
    1776:	3f 93       	push	r19
    1778:	4f 93       	push	r20
    177a:	5f 93       	push	r21
    177c:	6f 93       	push	r22
    177e:	7f 93       	push	r23
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	 if (	(pvCallBackFuncs[TIMER2_COMPINT]	!= NULL)  )
    1794:	80 91 78 01 	lds	r24, 0x0178
    1798:	90 91 79 01 	lds	r25, 0x0179
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	29 f0       	breq	.+10     	; 0x17aa <__vector_4+0x40>
		 {
		 pvCallBackFuncs[TIMER2_COMPINT]();
    17a0:	e0 91 78 01 	lds	r30, 0x0178
    17a4:	f0 91 79 01 	lds	r31, 0x0179
    17a8:	09 95       	icall
		 }

}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	ff 91       	pop	r31
    17b0:	ef 91       	pop	r30
    17b2:	bf 91       	pop	r27
    17b4:	af 91       	pop	r26
    17b6:	9f 91       	pop	r25
    17b8:	8f 91       	pop	r24
    17ba:	7f 91       	pop	r23
    17bc:	6f 91       	pop	r22
    17be:	5f 91       	pop	r21
    17c0:	4f 91       	pop	r20
    17c2:	3f 91       	pop	r19
    17c4:	2f 91       	pop	r18
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <DIO_VoidSetPinNumDir>:
#include "../../../Common/Bit_Math.h"
#include "../../../Common/Macros.h"
#include "../../../Common/STD_Types.h"


void DIO_VoidSetPinNumDir(u8 GroupNum,u8 PinNum ,u8 Dir){
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	27 97       	sbiw	r28, 0x07	; 7
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
    17e8:	4b 83       	std	Y+3, r20	; 0x03
	if ( GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA && PinNum <= DIO_Pin7&& PinNum >= DIO_Pin0 ){
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	85 30       	cpi	r24, 0x05	; 5
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <DIO_VoidSetPinNumDir+0x22>
    17f0:	f4 c0       	rjmp	.+488    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	88 23       	and	r24, r24
    17f6:	09 f4       	brne	.+2      	; 0x17fa <DIO_VoidSetPinNumDir+0x2a>
    17f8:	f0 c0       	rjmp	.+480    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	88 30       	cpi	r24, 0x08	; 8
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <DIO_VoidSetPinNumDir+0x32>
    1800:	ec c0       	rjmp	.+472    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
		if(Dir == Output_Pin){
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	09 f0       	breq	.+2      	; 0x180a <DIO_VoidSetPinNumDir+0x3a>
    1808:	70 c0       	rjmp	.+224    	; 0x18ea <DIO_VoidSetPinNumDir+0x11a>
			switch (GroupNum){
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3f 83       	std	Y+7, r19	; 0x07
    1812:	2e 83       	std	Y+6, r18	; 0x06
    1814:	8e 81       	ldd	r24, Y+6	; 0x06
    1816:	9f 81       	ldd	r25, Y+7	; 0x07
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	91 05       	cpc	r25, r1
    181c:	51 f1       	breq	.+84     	; 0x1872 <DIO_VoidSetPinNumDir+0xa2>
    181e:	2e 81       	ldd	r18, Y+6	; 0x06
    1820:	3f 81       	ldd	r19, Y+7	; 0x07
    1822:	23 30       	cpi	r18, 0x03	; 3
    1824:	31 05       	cpc	r19, r1
    1826:	34 f4       	brge	.+12     	; 0x1834 <DIO_VoidSetPinNumDir+0x64>
    1828:	8e 81       	ldd	r24, Y+6	; 0x06
    182a:	9f 81       	ldd	r25, Y+7	; 0x07
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	61 f0       	breq	.+24     	; 0x184a <DIO_VoidSetPinNumDir+0x7a>
    1832:	d3 c0       	rjmp	.+422    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
    1834:	2e 81       	ldd	r18, Y+6	; 0x06
    1836:	3f 81       	ldd	r19, Y+7	; 0x07
    1838:	23 30       	cpi	r18, 0x03	; 3
    183a:	31 05       	cpc	r19, r1
    183c:	71 f1       	breq	.+92     	; 0x189a <DIO_VoidSetPinNumDir+0xca>
    183e:	8e 81       	ldd	r24, Y+6	; 0x06
    1840:	9f 81       	ldd	r25, Y+7	; 0x07
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	91 05       	cpc	r25, r1
    1846:	e9 f1       	breq	.+122    	; 0x18c2 <DIO_VoidSetPinNumDir+0xf2>
    1848:	c8 c0       	rjmp	.+400    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupA : Set_Bit(DIO_DDRA,PinNum); break ;
    184a:	aa e3       	ldi	r26, 0x3A	; 58
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	ea e3       	ldi	r30, 0x3A	; 58
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_VoidSetPinNumDir+0x98>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_VoidSetPinNumDir+0x94>
    186c:	84 2b       	or	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	b4 c0       	rjmp	.+360    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupB : Set_Bit(DIO_DDRB,PinNum); break ;
    1872:	a7 e3       	ldi	r26, 0x37	; 55
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e7 e3       	ldi	r30, 0x37	; 55
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_VoidSetPinNumDir+0xc0>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_VoidSetPinNumDir+0xbc>
    1894:	84 2b       	or	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	a0 c0       	rjmp	.+320    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupC : Set_Bit(DIO_DDRC,PinNum); break ;
    189a:	a4 e3       	ldi	r26, 0x34	; 52
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e4 e3       	ldi	r30, 0x34	; 52
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_VoidSetPinNumDir+0xe8>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_VoidSetPinNumDir+0xe4>
    18bc:	84 2b       	or	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	8c c0       	rjmp	.+280    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupD : Set_Bit(DIO_DDRD,PinNum); break ;
    18c2:	a1 e3       	ldi	r26, 0x31	; 49
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e1 e3       	ldi	r30, 0x31	; 49
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_VoidSetPinNumDir+0x110>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_VoidSetPinNumDir+0x10c>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	78 c0       	rjmp	.+240    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			}
		}
		else if(Dir == Input_Pin){
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 23       	and	r24, r24
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <DIO_VoidSetPinNumDir+0x122>
    18f0:	74 c0       	rjmp	.+232    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			switch (GroupNum){
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	3d 83       	std	Y+5, r19	; 0x05
    18fa:	2c 83       	std	Y+4, r18	; 0x04
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	91 05       	cpc	r25, r1
    1904:	61 f1       	breq	.+88     	; 0x195e <DIO_VoidSetPinNumDir+0x18e>
    1906:	2c 81       	ldd	r18, Y+4	; 0x04
    1908:	3d 81       	ldd	r19, Y+5	; 0x05
    190a:	23 30       	cpi	r18, 0x03	; 3
    190c:	31 05       	cpc	r19, r1
    190e:	34 f4       	brge	.+12     	; 0x191c <DIO_VoidSetPinNumDir+0x14c>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	69 f0       	breq	.+26     	; 0x1934 <DIO_VoidSetPinNumDir+0x164>
    191a:	5f c0       	rjmp	.+190    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
    191c:	2c 81       	ldd	r18, Y+4	; 0x04
    191e:	3d 81       	ldd	r19, Y+5	; 0x05
    1920:	23 30       	cpi	r18, 0x03	; 3
    1922:	31 05       	cpc	r19, r1
    1924:	89 f1       	breq	.+98     	; 0x1988 <DIO_VoidSetPinNumDir+0x1b8>
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	91 05       	cpc	r25, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <DIO_VoidSetPinNumDir+0x162>
    1930:	40 c0       	rjmp	.+128    	; 0x19b2 <DIO_VoidSetPinNumDir+0x1e2>
    1932:	53 c0       	rjmp	.+166    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupA : Clear_Bit(DIO_DDRA,PinNum); break ;
    1934:	aa e3       	ldi	r26, 0x3A	; 58
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ea e3       	ldi	r30, 0x3A	; 58
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_VoidSetPinNumDir+0x182>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_VoidSetPinNumDir+0x17e>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	3e c0       	rjmp	.+124    	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupB : Clear_Bit(DIO_DDRB,PinNum); break ;
    195e:	a7 e3       	ldi	r26, 0x37	; 55
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e7 e3       	ldi	r30, 0x37	; 55
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_VoidSetPinNumDir+0x1ac>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <DIO_VoidSetPinNumDir+0x1a8>
    1980:	80 95       	com	r24
    1982:	84 23       	and	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	29 c0       	rjmp	.+82     	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupC : Clear_Bit(DIO_DDRC,PinNum); break ;
    1988:	a4 e3       	ldi	r26, 0x34	; 52
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e4 e3       	ldi	r30, 0x34	; 52
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_VoidSetPinNumDir+0x1d6>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_VoidSetPinNumDir+0x1d2>
    19aa:	80 95       	com	r24
    19ac:	84 23       	and	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <DIO_VoidSetPinNumDir+0x20a>
			case DIO_GroupD : Clear_Bit(DIO_DDRD,PinNum); break ;
    19b2:	a1 e3       	ldi	r26, 0x31	; 49
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e1 e3       	ldi	r30, 0x31	; 49
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_VoidSetPinNumDir+0x200>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_VoidSetPinNumDir+0x1fc>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
			}
		}
	}
}
    19da:	27 96       	adiw	r28, 0x07	; 7
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <DIO_VoidSetPinNumValue>:
void DIO_VoidSetPinNumValue(u8 GroupNum,u8 PinNum ,u8 value){
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	27 97       	sbiw	r28, 0x07	; 7
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	6a 83       	std	Y+2, r22	; 0x02
    1a04:	4b 83       	std	Y+3, r20	; 0x03
	if ( GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA && PinNum <= DIO_Pin7&& PinNum >= DIO_Pin0 ){
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	85 30       	cpi	r24, 0x05	; 5
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <DIO_VoidSetPinNumValue+0x22>
    1a0c:	f3 c0       	rjmp	.+486    	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	88 23       	and	r24, r24
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <DIO_VoidSetPinNumValue+0x2a>
    1a14:	ef c0       	rjmp	.+478    	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	88 30       	cpi	r24, 0x08	; 8
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <DIO_VoidSetPinNumValue+0x32>
    1a1c:	eb c0       	rjmp	.+470    	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
		if(value == High_Pin){
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <DIO_VoidSetPinNumValue+0x3a>
    1a24:	6f c0       	rjmp	.+222    	; 0x1b04 <DIO_VoidSetPinNumValue+0x118>
			switch (GroupNum){
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	3f 83       	std	Y+7, r19	; 0x07
    1a2e:	2e 83       	std	Y+6, r18	; 0x06
    1a30:	8e 81       	ldd	r24, Y+6	; 0x06
    1a32:	9f 81       	ldd	r25, Y+7	; 0x07
    1a34:	82 30       	cpi	r24, 0x02	; 2
    1a36:	91 05       	cpc	r25, r1
    1a38:	51 f1       	breq	.+84     	; 0x1a8e <DIO_VoidSetPinNumValue+0xa2>
    1a3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a3e:	23 30       	cpi	r18, 0x03	; 3
    1a40:	31 05       	cpc	r19, r1
    1a42:	34 f4       	brge	.+12     	; 0x1a50 <DIO_VoidSetPinNumValue+0x64>
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	9f 81       	ldd	r25, Y+7	; 0x07
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <DIO_VoidSetPinNumValue+0x7a>
    1a4e:	5a c0       	rjmp	.+180    	; 0x1b04 <DIO_VoidSetPinNumValue+0x118>
    1a50:	2e 81       	ldd	r18, Y+6	; 0x06
    1a52:	3f 81       	ldd	r19, Y+7	; 0x07
    1a54:	23 30       	cpi	r18, 0x03	; 3
    1a56:	31 05       	cpc	r19, r1
    1a58:	71 f1       	breq	.+92     	; 0x1ab6 <DIO_VoidSetPinNumValue+0xca>
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	91 05       	cpc	r25, r1
    1a62:	e9 f1       	breq	.+122    	; 0x1ade <DIO_VoidSetPinNumValue+0xf2>
    1a64:	4f c0       	rjmp	.+158    	; 0x1b04 <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupA : Set_Bit(DIO_PORTA,PinNum); break ;
    1a66:	ab e3       	ldi	r26, 0x3B	; 59
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	eb e3       	ldi	r30, 0x3B	; 59
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_VoidSetPinNumValue+0x98>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_VoidSetPinNumValue+0x94>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	3b c0       	rjmp	.+118    	; 0x1b04 <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupB : Set_Bit(DIO_PORTB,PinNum); break ;
    1a8e:	a8 e3       	ldi	r26, 0x38	; 56
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e8 e3       	ldi	r30, 0x38	; 56
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 2e       	mov	r0, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_VoidSetPinNumValue+0xc0>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_VoidSetPinNumValue+0xbc>
    1ab0:	84 2b       	or	r24, r20
    1ab2:	8c 93       	st	X, r24
    1ab4:	27 c0       	rjmp	.+78     	; 0x1b04 <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupC : Set_Bit(DIO_PORTC,PinNum); break ;
    1ab6:	a5 e3       	ldi	r26, 0x35	; 53
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e5 e3       	ldi	r30, 0x35	; 53
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <DIO_VoidSetPinNumValue+0xe8>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <DIO_VoidSetPinNumValue+0xe4>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	13 c0       	rjmp	.+38     	; 0x1b04 <DIO_VoidSetPinNumValue+0x118>
			case DIO_GroupD : Set_Bit(DIO_PORTD,PinNum); break ;
    1ade:	a2 e3       	ldi	r26, 0x32	; 50
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e2 e3       	ldi	r30, 0x32	; 50
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_VoidSetPinNumValue+0x110>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_VoidSetPinNumValue+0x10c>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
			}
		}
		if(value == Low_Pin){
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 23       	and	r24, r24
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <DIO_VoidSetPinNumValue+0x120>
    1b0a:	74 c0       	rjmp	.+232    	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
			switch (GroupNum){
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	3d 83       	std	Y+5, r19	; 0x05
    1b14:	2c 83       	std	Y+4, r18	; 0x04
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	61 f1       	breq	.+88     	; 0x1b78 <DIO_VoidSetPinNumValue+0x18c>
    1b20:	2c 81       	ldd	r18, Y+4	; 0x04
    1b22:	3d 81       	ldd	r19, Y+5	; 0x05
    1b24:	23 30       	cpi	r18, 0x03	; 3
    1b26:	31 05       	cpc	r19, r1
    1b28:	34 f4       	brge	.+12     	; 0x1b36 <DIO_VoidSetPinNumValue+0x14a>
    1b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	91 05       	cpc	r25, r1
    1b32:	69 f0       	breq	.+26     	; 0x1b4e <DIO_VoidSetPinNumValue+0x162>
    1b34:	5f c0       	rjmp	.+190    	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	23 30       	cpi	r18, 0x03	; 3
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	89 f1       	breq	.+98     	; 0x1ba2 <DIO_VoidSetPinNumValue+0x1b6>
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	84 30       	cpi	r24, 0x04	; 4
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <DIO_VoidSetPinNumValue+0x160>
    1b4a:	40 c0       	rjmp	.+128    	; 0x1bcc <DIO_VoidSetPinNumValue+0x1e0>
    1b4c:	53 c0       	rjmp	.+166    	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupA : Clear_Bit(DIO_PORTA,PinNum); break ;
    1b4e:	ab e3       	ldi	r26, 0x3B	; 59
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e3       	ldi	r30, 0x3B	; 59
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_VoidSetPinNumValue+0x180>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_VoidSetPinNumValue+0x17c>
    1b70:	80 95       	com	r24
    1b72:	84 23       	and	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	3e c0       	rjmp	.+124    	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupB : Clear_Bit(DIO_PORTB,PinNum); break ;
    1b78:	a8 e3       	ldi	r26, 0x38	; 56
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_VoidSetPinNumValue+0x1aa>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_VoidSetPinNumValue+0x1a6>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	29 c0       	rjmp	.+82     	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupC : Clear_Bit(DIO_PORTC,PinNum); break ;
    1ba2:	a5 e3       	ldi	r26, 0x35	; 53
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e5 e3       	ldi	r30, 0x35	; 53
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_VoidSetPinNumValue+0x1d4>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_VoidSetPinNumValue+0x1d0>
    1bc4:	80 95       	com	r24
    1bc6:	84 23       	and	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <DIO_VoidSetPinNumValue+0x208>
			case DIO_GroupD : Clear_Bit(DIO_PORTD,PinNum); break ;
    1bcc:	a2 e3       	ldi	r26, 0x32	; 50
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e2 e3       	ldi	r30, 0x32	; 50
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <DIO_VoidSetPinNumValue+0x1fe>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <DIO_VoidSetPinNumValue+0x1fa>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24

			}
		}
	}
}
    1bf4:	27 96       	adiw	r28, 0x07	; 7
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <DIO_U8GetPinNumValue>:
u8   DIO_U8GetPinNumValue(u8 GroupNum,u8 PinNum ){
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <DIO_U8GetPinNumValue+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <DIO_U8GetPinNumValue+0x8>
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	6a 83       	std	Y+2, r22	; 0x02
	if ( GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA && PinNum <= DIO_Pin7 && PinNum >= DIO_Pin0 ){
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	85 30       	cpi	r24, 0x05	; 5
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <DIO_U8GetPinNumValue+0x1a>
    1c1e:	74 c0       	rjmp	.+232    	; 0x1d08 <DIO_U8GetPinNumValue+0x102>
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	88 23       	and	r24, r24
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <DIO_U8GetPinNumValue+0x22>
    1c26:	70 c0       	rjmp	.+224    	; 0x1d08 <DIO_U8GetPinNumValue+0x102>
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	88 30       	cpi	r24, 0x08	; 8
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <DIO_U8GetPinNumValue+0x2a>
    1c2e:	6c c0       	rjmp	.+216    	; 0x1d08 <DIO_U8GetPinNumValue+0x102>
		switch(GroupNum){
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3d 83       	std	Y+5, r19	; 0x05
    1c38:	2c 83       	std	Y+4, r18	; 0x04
    1c3a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c3c:	5d 81       	ldd	r21, Y+5	; 0x05
    1c3e:	42 30       	cpi	r20, 0x02	; 2
    1c40:	51 05       	cpc	r21, r1
    1c42:	49 f1       	breq	.+82     	; 0x1c96 <DIO_U8GetPinNumValue+0x90>
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	34 f4       	brge	.+12     	; 0x1c5a <DIO_U8GetPinNumValue+0x54>
    1c4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c50:	3d 81       	ldd	r19, Y+5	; 0x05
    1c52:	21 30       	cpi	r18, 0x01	; 1
    1c54:	31 05       	cpc	r19, r1
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <DIO_U8GetPinNumValue+0x6a>
    1c58:	57 c0       	rjmp	.+174    	; 0x1d08 <DIO_U8GetPinNumValue+0x102>
    1c5a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c5c:	5d 81       	ldd	r21, Y+5	; 0x05
    1c5e:	43 30       	cpi	r20, 0x03	; 3
    1c60:	51 05       	cpc	r21, r1
    1c62:	61 f1       	breq	.+88     	; 0x1cbc <DIO_U8GetPinNumValue+0xb6>
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	d1 f1       	breq	.+116    	; 0x1ce2 <DIO_U8GetPinNumValue+0xdc>
    1c6e:	4c c0       	rjmp	.+152    	; 0x1d08 <DIO_U8GetPinNumValue+0x102>
		case DIO_GroupA : return Get_Bit(DIO_PINA,PinNum);
    1c70:	e9 e3       	ldi	r30, 0x39	; 57
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a9 01       	movw	r20, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <DIO_U8GetPinNumValue+0x82>
    1c84:	55 95       	asr	r21
    1c86:	47 95       	ror	r20
    1c88:	8a 95       	dec	r24
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <DIO_U8GetPinNumValue+0x7e>
    1c8c:	ca 01       	movw	r24, r20
    1c8e:	58 2f       	mov	r21, r24
    1c90:	51 70       	andi	r21, 0x01	; 1
    1c92:	5b 83       	std	Y+3, r21	; 0x03
    1c94:	3b c0       	rjmp	.+118    	; 0x1d0c <DIO_U8GetPinNumValue+0x106>
		case DIO_GroupB : return Get_Bit(DIO_PINB,PinNum);
    1c96:	e6 e3       	ldi	r30, 0x36	; 54
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a9 01       	movw	r20, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <DIO_U8GetPinNumValue+0xa8>
    1caa:	55 95       	asr	r21
    1cac:	47 95       	ror	r20
    1cae:	8a 95       	dec	r24
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <DIO_U8GetPinNumValue+0xa4>
    1cb2:	ca 01       	movw	r24, r20
    1cb4:	58 2f       	mov	r21, r24
    1cb6:	51 70       	andi	r21, 0x01	; 1
    1cb8:	5b 83       	std	Y+3, r21	; 0x03
    1cba:	28 c0       	rjmp	.+80     	; 0x1d0c <DIO_U8GetPinNumValue+0x106>
		case DIO_GroupC : return Get_Bit(DIO_PINC,PinNum);
    1cbc:	e3 e3       	ldi	r30, 0x33	; 51
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a9 01       	movw	r20, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_U8GetPinNumValue+0xce>
    1cd0:	55 95       	asr	r21
    1cd2:	47 95       	ror	r20
    1cd4:	8a 95       	dec	r24
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_U8GetPinNumValue+0xca>
    1cd8:	ca 01       	movw	r24, r20
    1cda:	58 2f       	mov	r21, r24
    1cdc:	51 70       	andi	r21, 0x01	; 1
    1cde:	5b 83       	std	Y+3, r21	; 0x03
    1ce0:	15 c0       	rjmp	.+42     	; 0x1d0c <DIO_U8GetPinNumValue+0x106>
		case DIO_GroupD : return Get_Bit(DIO_PIND,PinNum);
    1ce2:	e0 e3       	ldi	r30, 0x30	; 48
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	88 2f       	mov	r24, r24
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a9 01       	movw	r20, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_U8GetPinNumValue+0xf4>
    1cf6:	55 95       	asr	r21
    1cf8:	47 95       	ror	r20
    1cfa:	8a 95       	dec	r24
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_U8GetPinNumValue+0xf0>
    1cfe:	ca 01       	movw	r24, r20
    1d00:	58 2f       	mov	r21, r24
    1d02:	51 70       	andi	r21, 0x01	; 1
    1d04:	5b 83       	std	Y+3, r21	; 0x03
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <DIO_U8GetPinNumValue+0x106>

		}
	}
	return -1 ;
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <DIO_VoidSetPortDir>:

void DIO_VoidSetPortDir(u8 GroupNum,u8 Dir){
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <DIO_VoidSetPortDir+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <DIO_VoidSetPortDir+0x8>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	6a 83       	std	Y+2, r22	; 0x02
	if (GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA ){
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	85 30       	cpi	r24, 0x05	; 5
    1d32:	b0 f5       	brcc	.+108    	; 0x1da0 <DIO_VoidSetPortDir+0x82>
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	88 23       	and	r24, r24
    1d38:	99 f1       	breq	.+102    	; 0x1da0 <DIO_VoidSetPortDir+0x82>
		switch (GroupNum){
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3c 83       	std	Y+4, r19	; 0x04
    1d42:	2b 83       	std	Y+3, r18	; 0x03
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	82 30       	cpi	r24, 0x02	; 2
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	d9 f0       	breq	.+54     	; 0x1d84 <DIO_VoidSetPortDir+0x66>
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	3c 81       	ldd	r19, Y+4	; 0x04
    1d52:	23 30       	cpi	r18, 0x03	; 3
    1d54:	31 05       	cpc	r19, r1
    1d56:	34 f4       	brge	.+12     	; 0x1d64 <DIO_VoidSetPortDir+0x46>
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <DIO_VoidSetPortDir+0x5c>
    1d62:	1e c0       	rjmp	.+60     	; 0x1da0 <DIO_VoidSetPortDir+0x82>
    1d64:	2b 81       	ldd	r18, Y+3	; 0x03
    1d66:	3c 81       	ldd	r19, Y+4	; 0x04
    1d68:	23 30       	cpi	r18, 0x03	; 3
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	81 f0       	breq	.+32     	; 0x1d8e <DIO_VoidSetPortDir+0x70>
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	84 30       	cpi	r24, 0x04	; 4
    1d74:	91 05       	cpc	r25, r1
    1d76:	81 f0       	breq	.+32     	; 0x1d98 <DIO_VoidSetPortDir+0x7a>
    1d78:	13 c0       	rjmp	.+38     	; 0x1da0 <DIO_VoidSetPortDir+0x82>
		case DIO_GroupA : DIO_DDRA = Dir ; break ;
    1d7a:	ea e3       	ldi	r30, 0x3A	; 58
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	80 83       	st	Z, r24
    1d82:	0e c0       	rjmp	.+28     	; 0x1da0 <DIO_VoidSetPortDir+0x82>
		case DIO_GroupB : DIO_DDRB = Dir ; break ;
    1d84:	e7 e3       	ldi	r30, 0x37	; 55
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	80 83       	st	Z, r24
    1d8c:	09 c0       	rjmp	.+18     	; 0x1da0 <DIO_VoidSetPortDir+0x82>
		case DIO_GroupC : DIO_DDRC = Dir ; break ;
    1d8e:	e4 e3       	ldi	r30, 0x34	; 52
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	80 83       	st	Z, r24
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <DIO_VoidSetPortDir+0x82>
		case DIO_GroupD : DIO_DDRD = Dir ; break ;
    1d98:	e1 e3       	ldi	r30, 0x31	; 49
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	80 83       	st	Z, r24
		}
	}
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 GroupNum,u8 value){
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <DIO_VoidSetPortValue+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <DIO_VoidSetPortValue+0x8>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	6a 83       	std	Y+2, r22	; 0x02
	if (GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA ){
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	85 30       	cpi	r24, 0x05	; 5
    1dc2:	b0 f5       	brcc	.+108    	; 0x1e30 <DIO_VoidSetPortValue+0x82>
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	88 23       	and	r24, r24
    1dc8:	99 f1       	breq	.+102    	; 0x1e30 <DIO_VoidSetPortValue+0x82>
		switch (GroupNum){
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	3c 83       	std	Y+4, r19	; 0x04
    1dd2:	2b 83       	std	Y+3, r18	; 0x03
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	82 30       	cpi	r24, 0x02	; 2
    1dda:	91 05       	cpc	r25, r1
    1ddc:	d9 f0       	breq	.+54     	; 0x1e14 <DIO_VoidSetPortValue+0x66>
    1dde:	2b 81       	ldd	r18, Y+3	; 0x03
    1de0:	3c 81       	ldd	r19, Y+4	; 0x04
    1de2:	23 30       	cpi	r18, 0x03	; 3
    1de4:	31 05       	cpc	r19, r1
    1de6:	34 f4       	brge	.+12     	; 0x1df4 <DIO_VoidSetPortValue+0x46>
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	91 05       	cpc	r25, r1
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <DIO_VoidSetPortValue+0x5c>
    1df2:	1e c0       	rjmp	.+60     	; 0x1e30 <DIO_VoidSetPortValue+0x82>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	23 30       	cpi	r18, 0x03	; 3
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <DIO_VoidSetPortValue+0x70>
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	84 30       	cpi	r24, 0x04	; 4
    1e04:	91 05       	cpc	r25, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <DIO_VoidSetPortValue+0x7a>
    1e08:	13 c0       	rjmp	.+38     	; 0x1e30 <DIO_VoidSetPortValue+0x82>
		case DIO_GroupA : DIO_PORTA = value ; break ;
    1e0a:	eb e3       	ldi	r30, 0x3B	; 59
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	80 83       	st	Z, r24
    1e12:	0e c0       	rjmp	.+28     	; 0x1e30 <DIO_VoidSetPortValue+0x82>
		case DIO_GroupB : DIO_PORTB = value ; break ;
    1e14:	e8 e3       	ldi	r30, 0x38	; 56
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	80 83       	st	Z, r24
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <DIO_VoidSetPortValue+0x82>
		case DIO_GroupC : DIO_PORTC = value ; break ;
    1e1e:	e5 e3       	ldi	r30, 0x35	; 53
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	80 83       	st	Z, r24
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <DIO_VoidSetPortValue+0x82>
		case DIO_GroupD : DIO_PORTD = value ; break ;
    1e28:	e2 e3       	ldi	r30, 0x32	; 50
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	80 83       	st	Z, r24
		}
	}
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <DIO_U8GetPortValue>:
u8   DIO_U8GetPortValue(u8 GroupNum){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <DIO_U8GetPortValue+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <DIO_U8GetPortValue+0x8>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	if (GroupNum <= DIO_GroupD && GroupNum >= DIO_GroupA ){
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	85 30       	cpi	r24, 0x05	; 5
    1e50:	b8 f5       	brcc	.+110    	; 0x1ec0 <DIO_U8GetPortValue+0x82>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	88 23       	and	r24, r24
    1e56:	a1 f1       	breq	.+104    	; 0x1ec0 <DIO_U8GetPortValue+0x82>
		switch (GroupNum){
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3c 83       	std	Y+4, r19	; 0x04
    1e60:	2b 83       	std	Y+3, r18	; 0x03
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	82 30       	cpi	r24, 0x02	; 2
    1e68:	91 05       	cpc	r25, r1
    1e6a:	d9 f0       	breq	.+54     	; 0x1ea2 <DIO_U8GetPortValue+0x64>
    1e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e70:	23 30       	cpi	r18, 0x03	; 3
    1e72:	31 05       	cpc	r19, r1
    1e74:	34 f4       	brge	.+12     	; 0x1e82 <DIO_U8GetPortValue+0x44>
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	61 f0       	breq	.+24     	; 0x1e98 <DIO_U8GetPortValue+0x5a>
    1e80:	1f c0       	rjmp	.+62     	; 0x1ec0 <DIO_U8GetPortValue+0x82>
    1e82:	2b 81       	ldd	r18, Y+3	; 0x03
    1e84:	3c 81       	ldd	r19, Y+4	; 0x04
    1e86:	23 30       	cpi	r18, 0x03	; 3
    1e88:	31 05       	cpc	r19, r1
    1e8a:	81 f0       	breq	.+32     	; 0x1eac <DIO_U8GetPortValue+0x6e>
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	91 05       	cpc	r25, r1
    1e94:	81 f0       	breq	.+32     	; 0x1eb6 <DIO_U8GetPortValue+0x78>
    1e96:	14 c0       	rjmp	.+40     	; 0x1ec0 <DIO_U8GetPortValue+0x82>
		case DIO_GroupA : return DIO_PINA ;
    1e98:	e9 e3       	ldi	r30, 0x39	; 57
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	90 81       	ld	r25, Z
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	11 c0       	rjmp	.+34     	; 0x1ec4 <DIO_U8GetPortValue+0x86>
		case DIO_GroupB : return DIO_PINB ;
    1ea2:	e6 e3       	ldi	r30, 0x36	; 54
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	20 81       	ld	r18, Z
    1ea8:	2a 83       	std	Y+2, r18	; 0x02
    1eaa:	0c c0       	rjmp	.+24     	; 0x1ec4 <DIO_U8GetPortValue+0x86>
		case DIO_GroupC : return DIO_PINC ;
    1eac:	e3 e3       	ldi	r30, 0x33	; 51
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	30 81       	ld	r19, Z
    1eb2:	3a 83       	std	Y+2, r19	; 0x02
    1eb4:	07 c0       	rjmp	.+14     	; 0x1ec4 <DIO_U8GetPortValue+0x86>
		case DIO_GroupD : return DIO_PIND ;
    1eb6:	e0 e3       	ldi	r30, 0x30	; 48
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <DIO_U8GetPortValue+0x86>
		}
	}
	return -1 ;
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	9a 83       	std	Y+2, r25	; 0x02
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <Servo_VoidInitD4>:
#include "../../../MCAL/TIMER/Header/Timer_Interface.h"
#include "../HEADER/SERVO_Interface.h"


void Servo_VoidInitD4(void)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	/*Notes To use this function :
	 * 1- Timer1 Compare output mode must be set in non inverted pwm channel A or B According to Servo pin
	 * 2- Timer1 Prescaler Must be Divided by 8
	 **********************************************/
	DIO_VoidSetPinNumDir(Servo_Port,Servo_PinD4,Output_Pin);
    1edc:	84 e0       	ldi	r24, 0x04	; 4
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinNumDir>
	TIMER1_VoidInit(TIMER1_FastPWMOnICR1Mode);
    1ee6:	8d e0       	ldi	r24, 0x0D	; 13
    1ee8:	0e 94 a1 07 	call	0xf42	; 0xf42 <TIMER1_VoidInit>
	TIMER1_VoidSetICRValue(Servo_PeriodTime);
    1eec:	80 e2       	ldi	r24, 0x20	; 32
    1eee:	9e e4       	ldi	r25, 0x4E	; 78
    1ef0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <TIMER1_VoidSetICRValue>

}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <Servo_VoidRotateAngleD4>:

void Servo_VoidRotateAngleD4(u8 Local_u8Angle)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <Servo_VoidRotateAngleD4+0x6>
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCRValue=0;
    1f08:	1a 82       	std	Y+2, r1	; 0x02
    1f0a:	19 82       	std	Y+1, r1	; 0x01
	Local_u16OCRValue	=	((5.55555*Local_u8Angle)+1000)	;
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	aa 27       	eor	r26, r26
    1f14:	97 fd       	sbrc	r25, 7
    1f16:	a0 95       	com	r26
    1f18:	ba 2f       	mov	r27, r26
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	21 e1       	ldi	r18, 0x11	; 17
    1f2c:	37 ec       	ldi	r19, 0xC7	; 199
    1f2e:	41 eb       	ldi	r20, 0xB1	; 177
    1f30:	50 e4       	ldi	r21, 0x40	; 64
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a e7       	ldi	r20, 0x7A	; 122
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
#if Servo_PinD4	==	DIO_Pin5
	TIMER_VoidSetCompareMatchValue(TIMER1A,Local_u16OCRValue);
#elif	Servo_PinD4	==	DIO_Pin4
	TIMER_VoidSetCompareMatchValue(TIMER1B,Local_u16OCRValue);
    1f5e:	29 81       	ldd	r18, Y+1	; 0x01
    1f60:	3a 81       	ldd	r19, Y+2	; 0x02
    1f62:	84 e0       	ldi	r24, 0x04	; 4
    1f64:	b9 01       	movw	r22, r18
    1f66:	0e 94 38 09 	call	0x1270	; 0x1270 <TIMER_VoidSetCompareMatchValue>
#endif
}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <servo_init>:
#elif	Servo_PinD5	==	DIO_Pin4
	TIMER_VoidSetCompareMatchValue(TIMER1B,Local_u16OCRValue);
#endif
}
*/
void servo_init() {
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    SERVO_DDR |= (1 << SERVO_PIN);
    1f7e:	a1 e3       	ldi	r26, 0x31	; 49
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e1 e3       	ldi	r30, 0x31	; 49
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	80 62       	ori	r24, 0x20	; 32
    1f8a:	8c 93       	st	X, r24
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <servo_set_angle>:

void servo_set_angle(int angle) {
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	e4 97       	sbiw	r28, 0x34	; 52
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	9c ab       	std	Y+52, r25	; 0x34
    1fa8:	8b ab       	std	Y+51, r24	; 0x33
    int pulse_width = 500 + angle * 11;
    1faa:	4b a9       	ldd	r20, Y+51	; 0x33
    1fac:	5c a9       	ldd	r21, Y+52	; 0x34
    1fae:	ca 01       	movw	r24, r20
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	22 0f       	add	r18, r18
    1fb8:	33 1f       	adc	r19, r19
    1fba:	22 0f       	add	r18, r18
    1fbc:	33 1f       	adc	r19, r19
    1fbe:	82 0f       	add	r24, r18
    1fc0:	93 1f       	adc	r25, r19
    1fc2:	84 0f       	add	r24, r20
    1fc4:	95 1f       	adc	r25, r21
    1fc6:	8c 50       	subi	r24, 0x0C	; 12
    1fc8:	9e 4f       	sbci	r25, 0xFE	; 254
    1fca:	9a ab       	std	Y+50, r25	; 0x32
    1fcc:	89 ab       	std	Y+49, r24	; 0x31
    SERVO_PORT |= (1 << SERVO_PIN);
    1fce:	a2 e3       	ldi	r26, 0x32	; 50
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e2 e3       	ldi	r30, 0x32	; 50
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	80 62       	ori	r24, 0x20	; 32
    1fda:	8c 93       	st	X, r24
    _delay_us(pulse_width);
    1fdc:	89 a9       	ldd	r24, Y+49	; 0x31
    1fde:	9a a9       	ldd	r25, Y+50	; 0x32
    1fe0:	aa 27       	eor	r26, r26
    1fe2:	97 fd       	sbrc	r25, 7
    1fe4:	a0 95       	com	r26
    1fe6:	ba 2f       	mov	r27, r26
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8d a7       	std	Y+45, r24	; 0x2d
    1ff6:	9e a7       	std	Y+46, r25	; 0x2e
    1ff8:	af a7       	std	Y+47, r26	; 0x2f
    1ffa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ffc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ffe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	2b ea       	ldi	r18, 0xAB	; 171
    2006:	3a ea       	ldi	r19, 0xAA	; 170
    2008:	4a e2       	ldi	r20, 0x2A	; 42
    200a:	50 e4       	ldi	r21, 0x40	; 64
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	89 a7       	std	Y+41, r24	; 0x29
    2016:	9a a7       	std	Y+42, r25	; 0x2a
    2018:	ab a7       	std	Y+43, r26	; 0x2b
    201a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    201c:	69 a5       	ldd	r22, Y+41	; 0x29
    201e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2020:	8b a5       	ldd	r24, Y+43	; 0x2b
    2022:	9c a5       	ldd	r25, Y+44	; 0x2c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	1c f4       	brge	.+6      	; 0x203a <servo_set_angle+0xa8>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	88 a7       	std	Y+40, r24	; 0x28
    2038:	91 c0       	rjmp	.+290    	; 0x215c <servo_set_angle+0x1ca>
	else if (__tmp > 255)
    203a:	69 a5       	ldd	r22, Y+41	; 0x29
    203c:	7a a5       	ldd	r23, Y+42	; 0x2a
    203e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2040:	9c a5       	ldd	r25, Y+44	; 0x2c
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	53 e4       	ldi	r21, 0x43	; 67
    204a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	0c f0       	brlt	.+2      	; 0x2054 <servo_set_angle+0xc2>
    2052:	7b c0       	rjmp	.+246    	; 0x214a <servo_set_angle+0x1b8>
	{
		_delay_ms(__us / 1000.0);
    2054:	6d a5       	ldd	r22, Y+45	; 0x2d
    2056:	7e a5       	ldd	r23, Y+46	; 0x2e
    2058:	8f a5       	ldd	r24, Y+47	; 0x2f
    205a:	98 a9       	ldd	r25, Y+48	; 0x30
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a e7       	ldi	r20, 0x7A	; 122
    2062:	54 e4       	ldi	r21, 0x44	; 68
    2064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8c a3       	std	Y+36, r24	; 0x24
    206e:	9d a3       	std	Y+37, r25	; 0x25
    2070:	ae a3       	std	Y+38, r26	; 0x26
    2072:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2074:	6c a1       	ldd	r22, Y+36	; 0x24
    2076:	7d a1       	ldd	r23, Y+37	; 0x25
    2078:	8e a1       	ldd	r24, Y+38	; 0x26
    207a:	9f a1       	ldd	r25, Y+39	; 0x27
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	4a ef       	ldi	r20, 0xFA	; 250
    2082:	54 e4       	ldi	r21, 0x44	; 68
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	88 a3       	std	Y+32, r24	; 0x20
    208e:	99 a3       	std	Y+33, r25	; 0x21
    2090:	aa a3       	std	Y+34, r26	; 0x22
    2092:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2094:	68 a1       	ldd	r22, Y+32	; 0x20
    2096:	79 a1       	ldd	r23, Y+33	; 0x21
    2098:	8a a1       	ldd	r24, Y+34	; 0x22
    209a:	9b a1       	ldd	r25, Y+35	; 0x23
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e8       	ldi	r20, 0x80	; 128
    20a2:	5f e3       	ldi	r21, 0x3F	; 63
    20a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <servo_set_angle+0x124>
		__ticks = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9f 8f       	std	Y+31, r25	; 0x1f
    20b2:	8e 8f       	std	Y+30, r24	; 0x1e
    20b4:	3f c0       	rjmp	.+126    	; 0x2134 <servo_set_angle+0x1a2>
	else if (__tmp > 65535)
    20b6:	68 a1       	ldd	r22, Y+32	; 0x20
    20b8:	79 a1       	ldd	r23, Y+33	; 0x21
    20ba:	8a a1       	ldd	r24, Y+34	; 0x22
    20bc:	9b a1       	ldd	r25, Y+35	; 0x23
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	3f ef       	ldi	r19, 0xFF	; 255
    20c2:	4f e7       	ldi	r20, 0x7F	; 127
    20c4:	57 e4       	ldi	r21, 0x47	; 71
    20c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ca:	18 16       	cp	r1, r24
    20cc:	4c f5       	brge	.+82     	; 0x2120 <servo_set_angle+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ce:	6c a1       	ldd	r22, Y+36	; 0x24
    20d0:	7d a1       	ldd	r23, Y+37	; 0x25
    20d2:	8e a1       	ldd	r24, Y+38	; 0x26
    20d4:	9f a1       	ldd	r25, Y+39	; 0x27
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e2       	ldi	r20, 0x20	; 32
    20dc:	51 e4       	ldi	r21, 0x41	; 65
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9f 8f       	std	Y+31, r25	; 0x1f
    20f4:	8e 8f       	std	Y+30, r24	; 0x1e
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <servo_set_angle+0x184>
    20f8:	88 ec       	ldi	r24, 0xC8	; 200
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9d 8f       	std	Y+29, r25	; 0x1d
    20fe:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2100:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2102:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <servo_set_angle+0x172>
    2108:	9d 8f       	std	Y+29, r25	; 0x1d
    210a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    210e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	9f 8f       	std	Y+31, r25	; 0x1f
    2114:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2118:	9f 8d       	ldd	r25, Y+31	; 0x1f
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	69 f7       	brne	.-38     	; 0x20f8 <servo_set_angle+0x166>
    211e:	24 c0       	rjmp	.+72     	; 0x2168 <servo_set_angle+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2120:	68 a1       	ldd	r22, Y+32	; 0x20
    2122:	79 a1       	ldd	r23, Y+33	; 0x21
    2124:	8a a1       	ldd	r24, Y+34	; 0x22
    2126:	9b a1       	ldd	r25, Y+35	; 0x23
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9f 8f       	std	Y+31, r25	; 0x1f
    2132:	8e 8f       	std	Y+30, r24	; 0x1e
    2134:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2136:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2138:	9b 8f       	std	Y+27, r25	; 0x1b
    213a:	8a 8f       	std	Y+26, r24	; 0x1a
    213c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    213e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <servo_set_angle+0x1ae>
    2144:	9b 8f       	std	Y+27, r25	; 0x1b
    2146:	8a 8f       	std	Y+26, r24	; 0x1a
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <servo_set_angle+0x1d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    214a:	69 a5       	ldd	r22, Y+41	; 0x29
    214c:	7a a5       	ldd	r23, Y+42	; 0x2a
    214e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2150:	9c a5       	ldd	r25, Y+44	; 0x2c
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	88 a7       	std	Y+40, r24	; 0x28
    215c:	88 a5       	ldd	r24, Y+40	; 0x28
    215e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2160:	89 8d       	ldd	r24, Y+25	; 0x19
    2162:	8a 95       	dec	r24
    2164:	f1 f7       	brne	.-4      	; 0x2162 <servo_set_angle+0x1d0>
    2166:	89 8f       	std	Y+25, r24	; 0x19
    SERVO_PORT &= ~(1 << SERVO_PIN);
    2168:	a2 e3       	ldi	r26, 0x32	; 50
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e2 e3       	ldi	r30, 0x32	; 50
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 7d       	andi	r24, 0xDF	; 223
    2174:	8c 93       	st	X, r24
    _delay_us(20000 - pulse_width);
    2176:	20 e2       	ldi	r18, 0x20	; 32
    2178:	3e e4       	ldi	r19, 0x4E	; 78
    217a:	89 a9       	ldd	r24, Y+49	; 0x31
    217c:	9a a9       	ldd	r25, Y+50	; 0x32
    217e:	a9 01       	movw	r20, r18
    2180:	48 1b       	sub	r20, r24
    2182:	59 0b       	sbc	r21, r25
    2184:	ca 01       	movw	r24, r20
    2186:	aa 27       	eor	r26, r26
    2188:	97 fd       	sbrc	r25, 7
    218a:	a0 95       	com	r26
    218c:	ba 2f       	mov	r27, r26
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8d 8b       	std	Y+21, r24	; 0x15
    219c:	9e 8b       	std	Y+22, r25	; 0x16
    219e:	af 8b       	std	Y+23, r26	; 0x17
    21a0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	2b ea       	ldi	r18, 0xAB	; 171
    21ac:	3a ea       	ldi	r19, 0xAA	; 170
    21ae:	4a e2       	ldi	r20, 0x2A	; 42
    21b0:	50 e4       	ldi	r21, 0x40	; 64
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	89 8b       	std	Y+17, r24	; 0x11
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	ab 8b       	std	Y+19, r26	; 0x13
    21c0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21c2:	69 89       	ldd	r22, Y+17	; 0x11
    21c4:	7a 89       	ldd	r23, Y+18	; 0x12
    21c6:	8b 89       	ldd	r24, Y+19	; 0x13
    21c8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e8       	ldi	r20, 0x80	; 128
    21d0:	5f e3       	ldi	r21, 0x3F	; 63
    21d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d6:	88 23       	and	r24, r24
    21d8:	1c f4       	brge	.+6      	; 0x21e0 <servo_set_angle+0x24e>
		__ticks = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	88 8b       	std	Y+16, r24	; 0x10
    21de:	91 c0       	rjmp	.+290    	; 0x2302 <servo_set_angle+0x370>
	else if (__tmp > 255)
    21e0:	69 89       	ldd	r22, Y+17	; 0x11
    21e2:	7a 89       	ldd	r23, Y+18	; 0x12
    21e4:	8b 89       	ldd	r24, Y+19	; 0x13
    21e6:	9c 89       	ldd	r25, Y+20	; 0x14
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	53 e4       	ldi	r21, 0x43	; 67
    21f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	0c f0       	brlt	.+2      	; 0x21fa <servo_set_angle+0x268>
    21f8:	7b c0       	rjmp	.+246    	; 0x22f0 <servo_set_angle+0x35e>
	{
		_delay_ms(__us / 1000.0);
    21fa:	6d 89       	ldd	r22, Y+21	; 0x15
    21fc:	7e 89       	ldd	r23, Y+22	; 0x16
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4a e7       	ldi	r20, 0x7A	; 122
    2208:	54 e4       	ldi	r21, 0x44	; 68
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	8c 87       	std	Y+12, r24	; 0x0c
    2214:	9d 87       	std	Y+13, r25	; 0x0d
    2216:	ae 87       	std	Y+14, r26	; 0x0e
    2218:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	6c 85       	ldd	r22, Y+12	; 0x0c
    221c:	7d 85       	ldd	r23, Y+13	; 0x0d
    221e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2220:	9f 85       	ldd	r25, Y+15	; 0x0f
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a ef       	ldi	r20, 0xFA	; 250
    2228:	54 e4       	ldi	r21, 0x44	; 68
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	88 87       	std	Y+8, r24	; 0x08
    2234:	99 87       	std	Y+9, r25	; 0x09
    2236:	aa 87       	std	Y+10, r26	; 0x0a
    2238:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    223a:	68 85       	ldd	r22, Y+8	; 0x08
    223c:	79 85       	ldd	r23, Y+9	; 0x09
    223e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2240:	9b 85       	ldd	r25, Y+11	; 0x0b
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	2c f4       	brge	.+10     	; 0x225c <servo_set_angle+0x2ca>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9f 83       	std	Y+7, r25	; 0x07
    2258:	8e 83       	std	Y+6, r24	; 0x06
    225a:	3f c0       	rjmp	.+126    	; 0x22da <servo_set_angle+0x348>
	else if (__tmp > 65535)
    225c:	68 85       	ldd	r22, Y+8	; 0x08
    225e:	79 85       	ldd	r23, Y+9	; 0x09
    2260:	8a 85       	ldd	r24, Y+10	; 0x0a
    2262:	9b 85       	ldd	r25, Y+11	; 0x0b
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	4c f5       	brge	.+82     	; 0x22c6 <servo_set_angle+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2274:	6c 85       	ldd	r22, Y+12	; 0x0c
    2276:	7d 85       	ldd	r23, Y+13	; 0x0d
    2278:	8e 85       	ldd	r24, Y+14	; 0x0e
    227a:	9f 85       	ldd	r25, Y+15	; 0x0f
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e2       	ldi	r20, 0x20	; 32
    2282:	51 e4       	ldi	r21, 0x41	; 65
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9f 83       	std	Y+7, r25	; 0x07
    229a:	8e 83       	std	Y+6, r24	; 0x06
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <servo_set_angle+0x32a>
    229e:	88 ec       	ldi	r24, 0xC8	; 200
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9d 83       	std	Y+5, r25	; 0x05
    22a4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	9d 81       	ldd	r25, Y+5	; 0x05
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <servo_set_angle+0x318>
    22ae:	9d 83       	std	Y+5, r25	; 0x05
    22b0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	8e 81       	ldd	r24, Y+6	; 0x06
    22b4:	9f 81       	ldd	r25, Y+7	; 0x07
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	9f 83       	std	Y+7, r25	; 0x07
    22ba:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	8e 81       	ldd	r24, Y+6	; 0x06
    22be:	9f 81       	ldd	r25, Y+7	; 0x07
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	69 f7       	brne	.-38     	; 0x229e <servo_set_angle+0x30c>
    22c4:	24 c0       	rjmp	.+72     	; 0x230e <servo_set_angle+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c6:	68 85       	ldd	r22, Y+8	; 0x08
    22c8:	79 85       	ldd	r23, Y+9	; 0x09
    22ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    22cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9f 83       	std	Y+7, r25	; 0x07
    22d8:	8e 83       	std	Y+6, r24	; 0x06
    22da:	8e 81       	ldd	r24, Y+6	; 0x06
    22dc:	9f 81       	ldd	r25, Y+7	; 0x07
    22de:	9b 83       	std	Y+3, r25	; 0x03
    22e0:	8a 83       	std	Y+2, r24	; 0x02
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <servo_set_angle+0x354>
    22ea:	9b 83       	std	Y+3, r25	; 0x03
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <servo_set_angle+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22f0:	69 89       	ldd	r22, Y+17	; 0x11
    22f2:	7a 89       	ldd	r23, Y+18	; 0x12
    22f4:	8b 89       	ldd	r24, Y+19	; 0x13
    22f6:	9c 89       	ldd	r25, Y+20	; 0x14
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	88 8b       	std	Y+16, r24	; 0x10
    2302:	88 89       	ldd	r24, Y+16	; 0x10
    2304:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	8a 95       	dec	r24
    230a:	f1 f7       	brne	.-4      	; 0x2308 <servo_set_angle+0x376>
    230c:	89 83       	std	Y+1, r24	; 0x01
}
    230e:	e4 96       	adiw	r28, 0x34	; 52
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <LCD_VoidSendCommand>:

#include <util/delay.h>
#include "../Header/LCD_Interface.h"


void LCD_VoidSendCommand(u8 LCD_Command){
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	2f 97       	sbiw	r28, 0x0f	; 15
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RsPin,Low_Pin);
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RwPin,Low_Pin);
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
	DIO_VoidSetPortValue(LCD_DataPort,LCD_Command);
    234a:	84 e0       	ldi	r24, 0x04	; 4
    234c:	6f 85       	ldd	r22, Y+15	; 0x0f
    234e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_VoidSetPortValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,High_Pin);
    2352:	83 e0       	ldi	r24, 0x03	; 3
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 e8       	ldi	r26, 0x80	; 128
    2362:	bf e3       	ldi	r27, 0x3F	; 63
    2364:	8b 87       	std	Y+11, r24	; 0x0b
    2366:	9c 87       	std	Y+12, r25	; 0x0c
    2368:	ad 87       	std	Y+13, r26	; 0x0d
    236a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	6b 85       	ldd	r22, Y+11	; 0x0b
    236e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2370:	8d 85       	ldd	r24, Y+13	; 0x0d
    2372:	9e 85       	ldd	r25, Y+14	; 0x0e
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a ef       	ldi	r20, 0xFA	; 250
    237a:	54 e4       	ldi	r21, 0x44	; 68
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8f 83       	std	Y+7, r24	; 0x07
    2386:	98 87       	std	Y+8, r25	; 0x08
    2388:	a9 87       	std	Y+9, r26	; 0x09
    238a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	3f c0       	rjmp	.+126    	; 0x242c <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	57 e4       	ldi	r21, 0x47	; 71
    23be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	4c f5       	brge	.+82     	; 0x2418 <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <LCD_VoidSendCommand+0xee>
    23f0:	88 ec       	ldi	r24, 0xC8	; 200
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 83       	std	Y+4, r25	; 0x04
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_VoidSendCommand+0xdc>
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	69 f7       	brne	.-38     	; 0x23f0 <LCD_VoidSendCommand+0xd0>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_VoidSendCommand+0x118>
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,Low_Pin);
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
}
    244a:	2f 96       	adiw	r28, 0x0f	; 15
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <LCD_VoidSendDataChar>:

void LCD_VoidSendDataChar(u8 LCD_DataChar){
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	2f 97       	sbiw	r28, 0x0f	; 15
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RsPin,High_Pin);
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_RwPin,Low_Pin);
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	61 e0       	ldi	r22, 0x01	; 1
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
	DIO_VoidSetPortValue(LCD_DataPort,LCD_DataChar);
    2486:	84 e0       	ldi	r24, 0x04	; 4
    2488:	6f 85       	ldd	r22, Y+15	; 0x0f
    248a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <DIO_VoidSetPortValue>
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,High_Pin);
    248e:	83 e0       	ldi	r24, 0x03	; 3
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e8       	ldi	r26, 0x80	; 128
    249e:	bf e3       	ldi	r27, 0x3F	; 63
    24a0:	8b 87       	std	Y+11, r24	; 0x0b
    24a2:	9c 87       	std	Y+12, r25	; 0x0c
    24a4:	ad 87       	std	Y+13, r26	; 0x0d
    24a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a ef       	ldi	r20, 0xFA	; 250
    24b6:	54 e4       	ldi	r21, 0x44	; 68
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8f 83       	std	Y+7, r24	; 0x07
    24c2:	98 87       	std	Y+8, r25	; 0x08
    24c4:	a9 87       	std	Y+9, r26	; 0x09
    24c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ca:	78 85       	ldd	r23, Y+8	; 0x08
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <LCD_VoidSendDataChar+0x8e>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <LCD_VoidSendDataChar+0x10c>
	else if (__tmp > 65535)
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <LCD_VoidSendDataChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	0f c0       	rjmp	.+30     	; 0x254a <LCD_VoidSendDataChar+0xee>
    252c:	88 ec       	ldi	r24, 0xC8	; 200
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_VoidSendDataChar+0xdc>
    253c:	9c 83       	std	Y+4, r25	; 0x04
    253e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <LCD_VoidSendDataChar+0xd0>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <LCD_VoidSendDataChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_VoidSendDataChar+0x118>
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinNumValue(LCD_CtrlPort,LCD_EPin,Low_Pin);
    257c:	83 e0       	ldi	r24, 0x03	; 3
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
}
    2586:	2f 96       	adiw	r28, 0x0f	; 15
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_VoidInit>:
void LCD_VoidInit(void){
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	e8 97       	sbiw	r28, 0x38	; 56
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
	/* set direction for LCD*/
	DIO_VoidSetPortDir(LCD_DataPort,Output_Port);
    25ac:	84 e0       	ldi	r24, 0x04	; 4
    25ae:	6f ef       	ldi	r22, 0xFF	; 255
    25b0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <DIO_VoidSetPortDir>
	DIO_VoidSetPinNumDir(LCD_CtrlPort,LCD_RsPin,Output_Pin);
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	62 e0       	ldi	r22, 0x02	; 2
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(LCD_CtrlPort,LCD_RwPin,Output_Pin);
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(LCD_CtrlPort,LCD_EPin,Output_Pin);
    25c8:	83 e0       	ldi	r24, 0x03	; 3
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinNumDir>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	ac e0       	ldi	r26, 0x0C	; 12
    25d8:	b2 e4       	ldi	r27, 0x42	; 66
    25da:	8d ab       	std	Y+53, r24	; 0x35
    25dc:	9e ab       	std	Y+54, r25	; 0x36
    25de:	af ab       	std	Y+55, r26	; 0x37
    25e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6d a9       	ldd	r22, Y+53	; 0x35
    25e4:	7e a9       	ldd	r23, Y+54	; 0x36
    25e6:	8f a9       	ldd	r24, Y+55	; 0x37
    25e8:	98 ad       	ldd	r25, Y+56	; 0x38
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	89 ab       	std	Y+49, r24	; 0x31
    25fc:	9a ab       	std	Y+50, r25	; 0x32
    25fe:	ab ab       	std	Y+51, r26	; 0x33
    2600:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2602:	69 a9       	ldd	r22, Y+49	; 0x31
    2604:	7a a9       	ldd	r23, Y+50	; 0x32
    2606:	8b a9       	ldd	r24, Y+51	; 0x33
    2608:	9c a9       	ldd	r25, Y+52	; 0x34
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <LCD_VoidInit+0x8c>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	98 ab       	std	Y+48, r25	; 0x30
    2620:	8f a7       	std	Y+47, r24	; 0x2f
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    2624:	69 a9       	ldd	r22, Y+49	; 0x31
    2626:	7a a9       	ldd	r23, Y+50	; 0x32
    2628:	8b a9       	ldd	r24, Y+51	; 0x33
    262a:	9c a9       	ldd	r25, Y+52	; 0x34
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6d a9       	ldd	r22, Y+53	; 0x35
    263e:	7e a9       	ldd	r23, Y+54	; 0x36
    2640:	8f a9       	ldd	r24, Y+55	; 0x37
    2642:	98 ad       	ldd	r25, Y+56	; 0x38
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	98 ab       	std	Y+48, r25	; 0x30
    2662:	8f a7       	std	Y+47, r24	; 0x2f
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <LCD_VoidInit+0xec>
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9e a7       	std	Y+46, r25	; 0x2e
    266c:	8d a7       	std	Y+45, r24	; 0x2d
    266e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2670:	9e a5       	ldd	r25, Y+46	; 0x2e
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_VoidInit+0xda>
    2676:	9e a7       	std	Y+46, r25	; 0x2e
    2678:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8f a5       	ldd	r24, Y+47	; 0x2f
    267c:	98 a9       	ldd	r25, Y+48	; 0x30
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	98 ab       	std	Y+48, r25	; 0x30
    2682:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8f a5       	ldd	r24, Y+47	; 0x2f
    2686:	98 a9       	ldd	r25, Y+48	; 0x30
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <LCD_VoidInit+0xce>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	69 a9       	ldd	r22, Y+49	; 0x31
    2690:	7a a9       	ldd	r23, Y+50	; 0x32
    2692:	8b a9       	ldd	r24, Y+51	; 0x33
    2694:	9c a9       	ldd	r25, Y+52	; 0x34
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	98 ab       	std	Y+48, r25	; 0x30
    26a0:	8f a7       	std	Y+47, r24	; 0x2f
    26a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a4:	98 a9       	ldd	r25, Y+48	; 0x30
    26a6:	9c a7       	std	Y+44, r25	; 0x2c
    26a8:	8b a7       	std	Y+43, r24	; 0x2b
    26aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_VoidInit+0x116>
    26b2:	9c a7       	std	Y+44, r25	; 0x2c
    26b4:	8b a7       	std	Y+43, r24	; 0x2b
	/* set Initialize for LCD*/
	_delay_ms(35);
	LCD_VoidSendCommand(0x38);
    26b6:	88 e3       	ldi	r24, 0x38	; 56
    26b8:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_VoidSendCommand>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a0 e8       	ldi	r26, 0x80	; 128
    26c2:	bf e3       	ldi	r27, 0x3F	; 63
    26c4:	8f a3       	std	Y+39, r24	; 0x27
    26c6:	98 a7       	std	Y+40, r25	; 0x28
    26c8:	a9 a7       	std	Y+41, r26	; 0x29
    26ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26cc:	6f a1       	ldd	r22, Y+39	; 0x27
    26ce:	78 a5       	ldd	r23, Y+40	; 0x28
    26d0:	89 a5       	ldd	r24, Y+41	; 0x29
    26d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4a ef       	ldi	r20, 0xFA	; 250
    26da:	54 e4       	ldi	r21, 0x44	; 68
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8b a3       	std	Y+35, r24	; 0x23
    26e6:	9c a3       	std	Y+36, r25	; 0x24
    26e8:	ad a3       	std	Y+37, r26	; 0x25
    26ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26ec:	6b a1       	ldd	r22, Y+35	; 0x23
    26ee:	7c a1       	ldd	r23, Y+36	; 0x24
    26f0:	8d a1       	ldd	r24, Y+37	; 0x25
    26f2:	9e a1       	ldd	r25, Y+38	; 0x26
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2700:	88 23       	and	r24, r24
    2702:	2c f4       	brge	.+10     	; 0x270e <LCD_VoidInit+0x176>
		__ticks = 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9a a3       	std	Y+34, r25	; 0x22
    270a:	89 a3       	std	Y+33, r24	; 0x21
    270c:	3f c0       	rjmp	.+126    	; 0x278c <LCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    270e:	6b a1       	ldd	r22, Y+35	; 0x23
    2710:	7c a1       	ldd	r23, Y+36	; 0x24
    2712:	8d a1       	ldd	r24, Y+37	; 0x25
    2714:	9e a1       	ldd	r25, Y+38	; 0x26
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	57 e4       	ldi	r21, 0x47	; 71
    271e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2722:	18 16       	cp	r1, r24
    2724:	4c f5       	brge	.+82     	; 0x2778 <LCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2726:	6f a1       	ldd	r22, Y+39	; 0x27
    2728:	78 a5       	ldd	r23, Y+40	; 0x28
    272a:	89 a5       	ldd	r24, Y+41	; 0x29
    272c:	9a a5       	ldd	r25, Y+42	; 0x2a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e2       	ldi	r20, 0x20	; 32
    2734:	51 e4       	ldi	r21, 0x41	; 65
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9a a3       	std	Y+34, r25	; 0x22
    274c:	89 a3       	std	Y+33, r24	; 0x21
    274e:	0f c0       	rjmp	.+30     	; 0x276e <LCD_VoidInit+0x1d6>
    2750:	88 ec       	ldi	r24, 0xC8	; 200
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	98 a3       	std	Y+32, r25	; 0x20
    2756:	8f 8f       	std	Y+31, r24	; 0x1f
    2758:	8f 8d       	ldd	r24, Y+31	; 0x1f
    275a:	98 a1       	ldd	r25, Y+32	; 0x20
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_VoidInit+0x1c4>
    2760:	98 a3       	std	Y+32, r25	; 0x20
    2762:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	89 a1       	ldd	r24, Y+33	; 0x21
    2766:	9a a1       	ldd	r25, Y+34	; 0x22
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	9a a3       	std	Y+34, r25	; 0x22
    276c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276e:	89 a1       	ldd	r24, Y+33	; 0x21
    2770:	9a a1       	ldd	r25, Y+34	; 0x22
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	69 f7       	brne	.-38     	; 0x2750 <LCD_VoidInit+0x1b8>
    2776:	14 c0       	rjmp	.+40     	; 0x27a0 <LCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	6b a1       	ldd	r22, Y+35	; 0x23
    277a:	7c a1       	ldd	r23, Y+36	; 0x24
    277c:	8d a1       	ldd	r24, Y+37	; 0x25
    277e:	9e a1       	ldd	r25, Y+38	; 0x26
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	9a a3       	std	Y+34, r25	; 0x22
    278a:	89 a3       	std	Y+33, r24	; 0x21
    278c:	89 a1       	ldd	r24, Y+33	; 0x21
    278e:	9a a1       	ldd	r25, Y+34	; 0x22
    2790:	9e 8f       	std	Y+30, r25	; 0x1e
    2792:	8d 8f       	std	Y+29, r24	; 0x1d
    2794:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2796:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <LCD_VoidInit+0x200>
    279c:	9e 8f       	std	Y+30, r25	; 0x1e
    279e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidSendCommand(0x0C);
    27a0:	8c e0       	ldi	r24, 0x0C	; 12
    27a2:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_VoidSendCommand>
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e8       	ldi	r26, 0x80	; 128
    27ac:	bf e3       	ldi	r27, 0x3F	; 63
    27ae:	89 8f       	std	Y+25, r24	; 0x19
    27b0:	9a 8f       	std	Y+26, r25	; 0x1a
    27b2:	ab 8f       	std	Y+27, r26	; 0x1b
    27b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	69 8d       	ldd	r22, Y+25	; 0x19
    27b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4a ef       	ldi	r20, 0xFA	; 250
    27c4:	54 e4       	ldi	r21, 0x44	; 68
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8d 8b       	std	Y+21, r24	; 0x15
    27d0:	9e 8b       	std	Y+22, r25	; 0x16
    27d2:	af 8b       	std	Y+23, r26	; 0x17
    27d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27d6:	6d 89       	ldd	r22, Y+21	; 0x15
    27d8:	7e 89       	ldd	r23, Y+22	; 0x16
    27da:	8f 89       	ldd	r24, Y+23	; 0x17
    27dc:	98 8d       	ldd	r25, Y+24	; 0x18
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e8       	ldi	r20, 0x80	; 128
    27e4:	5f e3       	ldi	r21, 0x3F	; 63
    27e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <LCD_VoidInit+0x260>
		__ticks = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
    27f6:	3f c0       	rjmp	.+126    	; 0x2876 <LCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    27f8:	6d 89       	ldd	r22, Y+21	; 0x15
    27fa:	7e 89       	ldd	r23, Y+22	; 0x16
    27fc:	8f 89       	ldd	r24, Y+23	; 0x17
    27fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	4c f5       	brge	.+82     	; 0x2862 <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2810:	69 8d       	ldd	r22, Y+25	; 0x19
    2812:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2814:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2816:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9c 8b       	std	Y+20, r25	; 0x14
    2836:	8b 8b       	std	Y+19, r24	; 0x13
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <LCD_VoidInit+0x2c0>
    283a:	88 ec       	ldi	r24, 0xC8	; 200
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9a 8b       	std	Y+18, r25	; 0x12
    2840:	89 8b       	std	Y+17, r24	; 0x11
    2842:	89 89       	ldd	r24, Y+17	; 0x11
    2844:	9a 89       	ldd	r25, Y+18	; 0x12
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_VoidInit+0x2ae>
    284a:	9a 8b       	std	Y+18, r25	; 0x12
    284c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284e:	8b 89       	ldd	r24, Y+19	; 0x13
    2850:	9c 89       	ldd	r25, Y+20	; 0x14
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	9c 8b       	std	Y+20, r25	; 0x14
    2856:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	69 f7       	brne	.-38     	; 0x283a <LCD_VoidInit+0x2a2>
    2860:	14 c0       	rjmp	.+40     	; 0x288a <LCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2862:	6d 89       	ldd	r22, Y+21	; 0x15
    2864:	7e 89       	ldd	r23, Y+22	; 0x16
    2866:	8f 89       	ldd	r24, Y+23	; 0x17
    2868:	98 8d       	ldd	r25, Y+24	; 0x18
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
    2876:	8b 89       	ldd	r24, Y+19	; 0x13
    2878:	9c 89       	ldd	r25, Y+20	; 0x14
    287a:	98 8b       	std	Y+16, r25	; 0x10
    287c:	8f 87       	std	Y+15, r24	; 0x0f
    287e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2880:	98 89       	ldd	r25, Y+16	; 0x10
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_VoidInit+0x2ea>
    2886:	98 8b       	std	Y+16, r25	; 0x10
    2888:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidSendCommand(0x01);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_VoidSendCommand>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 e0       	ldi	r26, 0x00	; 0
    2896:	b0 e4       	ldi	r27, 0x40	; 64
    2898:	8b 87       	std	Y+11, r24	; 0x0b
    289a:	9c 87       	std	Y+12, r25	; 0x0c
    289c:	ad 87       	std	Y+13, r26	; 0x0d
    289e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a ef       	ldi	r20, 0xFA	; 250
    28ae:	54 e4       	ldi	r21, 0x44	; 68
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	8f 83       	std	Y+7, r24	; 0x07
    28ba:	98 87       	std	Y+8, r25	; 0x08
    28bc:	a9 87       	std	Y+9, r26	; 0x09
    28be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c0:	6f 81       	ldd	r22, Y+7	; 0x07
    28c2:	78 85       	ldd	r23, Y+8	; 0x08
    28c4:	89 85       	ldd	r24, Y+9	; 0x09
    28c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e8       	ldi	r20, 0x80	; 128
    28ce:	5f e3       	ldi	r21, 0x3F	; 63
    28d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	2c f4       	brge	.+10     	; 0x28e2 <LCD_VoidInit+0x34a>
		__ticks = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	3f c0       	rjmp	.+126    	; 0x2960 <LCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    28e2:	6f 81       	ldd	r22, Y+7	; 0x07
    28e4:	78 85       	ldd	r23, Y+8	; 0x08
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	3f ef       	ldi	r19, 0xFF	; 255
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	57 e4       	ldi	r21, 0x47	; 71
    28f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f6:	18 16       	cp	r1, r24
    28f8:	4c f5       	brge	.+82     	; 0x294c <LCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2900:	9e 85       	ldd	r25, Y+14	; 0x0e
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	51 e4       	ldi	r21, 0x41	; 65
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	0f c0       	rjmp	.+30     	; 0x2942 <LCD_VoidInit+0x3aa>
    2924:	88 ec       	ldi	r24, 0xC8	; 200
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9c 83       	std	Y+4, r25	; 0x04
    292a:	8b 83       	std	Y+3, r24	; 0x03
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_VoidInit+0x398>
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	69 f7       	brne	.-38     	; 0x2924 <LCD_VoidInit+0x38c>
    294a:	14 c0       	rjmp	.+40     	; 0x2974 <LCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	8d 81       	ldd	r24, Y+5	; 0x05
    2962:	9e 81       	ldd	r25, Y+6	; 0x06
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <LCD_VoidInit+0x3d4>
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2974:	e8 96       	adiw	r28, 0x38	; 56
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <LCD_VoidSendDataString>:
void LCD_VoidSendDataString(u8* LCD_DataString)
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	00 d0       	rcall	.+0      	; 0x298c <LCD_VoidSendDataString+0x6>
    298c:	0f 92       	push	r0
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	9b 83       	std	Y+3, r25	; 0x03
    2994:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter = 0;
    2996:	19 82       	std	Y+1, r1	; 0x01
    2998:	0e c0       	rjmp	.+28     	; 0x29b6 <LCD_VoidSendDataString+0x30>
	while (LCD_DataString[Local_U8Counter] != '\0'){
		LCD_VoidSendDataChar(LCD_DataString[Local_U8Counter]);
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	fc 01       	movw	r30, r24
    29a6:	e2 0f       	add	r30, r18
    29a8:	f3 1f       	adc	r31, r19
    29aa:	80 81       	ld	r24, Z
    29ac:	0e 94 2e 12 	call	0x245c	; 0x245c <LCD_VoidSendDataChar>
		Local_U8Counter++ ;
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void LCD_VoidSendDataString(u8* LCD_DataString)
{
	u8 Local_U8Counter = 0;
	while (LCD_DataString[Local_U8Counter] != '\0'){
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	9b 81       	ldd	r25, Y+3	; 0x03
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	80 81       	ld	r24, Z
    29c8:	88 23       	and	r24, r24
    29ca:	39 f7       	brne	.-50     	; 0x299a <LCD_VoidSendDataString+0x14>
		LCD_VoidSendDataChar(LCD_DataString[Local_U8Counter]);
		Local_U8Counter++ ;

}
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 X_Position,u8 Y_Position)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	00 d0       	rcall	.+0      	; 0x29de <LCD_VoidGoToXY+0x6>
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOCAL_Positon = 0 ;
    29e8:	19 82       	std	Y+1, r1	; 0x01
	if(X_Position == 0){
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	88 23       	and	r24, r24
    29ee:	19 f4       	brne	.+6      	; 0x29f6 <LCD_VoidGoToXY+0x1e>
		LOCAL_Positon = Y_Position ;
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	06 c0       	rjmp	.+12     	; 0x2a02 <LCD_VoidGoToXY+0x2a>
	}
	else if (X_Position == 1){
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	81 30       	cpi	r24, 0x01	; 1
    29fa:	19 f4       	brne	.+6      	; 0x2a02 <LCD_VoidGoToXY+0x2a>
		LOCAL_Positon = Y_Position + 0x40 ;
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	80 5c       	subi	r24, 0xC0	; 192
    2a00:	89 83       	std	Y+1, r24	; 0x01
	}
	Set_Bit(LOCAL_Positon,DIO_Pin7);
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	80 68       	ori	r24, 0x80	; 128
    2a06:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LOCAL_Positon);
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_VoidSendCommand>
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <LCD_VoidWriteSpecialChar>:
void LCD_VoidWriteSpecialChar(u8 *Pattern , u8 Patern_Numper ,u8 X_Position,u8 Y_Position)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	27 97       	sbiw	r28, 0x07	; 7
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
    2a32:	6d 83       	std	Y+5, r22	; 0x05
    2a34:	4e 83       	std	Y+6, r20	; 0x06
    2a36:	2f 83       	std	Y+7, r18	; 0x07
	u8 Counter = 0 ;
    2a38:	1a 82       	std	Y+2, r1	; 0x02
	u8 LCD_CGRamAdress = 0 ;
    2a3a:	19 82       	std	Y+1, r1	; 0x01
	/*Calculate the CGRAM Address whose each block is 8 bytes */
	LCD_CGRamAdress = Patern_Numper*8 ;
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	88 0f       	add	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_CGRamAdress + 64);
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	80 5c       	subi	r24, 0xC0	; 192
    2a54:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_VoidSendCommand>
for (Counter = 0; Counter < 8 ; Counter ++ ){
    2a58:	1a 82       	std	Y+2, r1	; 0x02
    2a5a:	0e c0       	rjmp	.+28     	; 0x2a78 <LCD_VoidWriteSpecialChar+0x5e>
	LCD_VoidSendDataChar(Pattern[Counter]);
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	80 81       	ld	r24, Z
    2a6e:	0e 94 2e 12 	call	0x245c	; 0x245c <LCD_VoidSendDataChar>
	u8 Counter = 0 ;
	u8 LCD_CGRamAdress = 0 ;
	/*Calculate the CGRAM Address whose each block is 8 bytes */
	LCD_CGRamAdress = Patern_Numper*8 ;
	LCD_VoidSendCommand(LCD_CGRamAdress + 64);
for (Counter = 0; Counter < 8 ; Counter ++ ){
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	8f 5f       	subi	r24, 0xFF	; 255
    2a76:	8a 83       	std	Y+2, r24	; 0x02
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	88 30       	cpi	r24, 0x08	; 8
    2a7c:	78 f3       	brcs	.-34     	; 0x2a5c <LCD_VoidWriteSpecialChar+0x42>
	LCD_VoidSendDataChar(Pattern[Counter]);
}
LCD_VoidGoToXY(X_Position,Y_Position);
    2a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a80:	6f 81       	ldd	r22, Y+7	; 0x07
    2a82:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_VoidGoToXY>
LCD_VoidSendDataChar(Patern_Numper);
    2a86:	8d 81       	ldd	r24, Y+5	; 0x05
    2a88:	0e 94 2e 12 	call	0x245c	; 0x245c <LCD_VoidSendDataChar>
}
    2a8c:	27 96       	adiw	r28, 0x07	; 7
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <LCD_VoidSendNumber>:
void LCD_VoidSendNumber(u32 Numper)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	61 97       	sbiw	r28, 0x11	; 17
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	6e 87       	std	Y+14, r22	; 0x0e
    2ab4:	7f 87       	std	Y+15, r23	; 0x0f
    2ab6:	88 8b       	std	Y+16, r24	; 0x10
    2ab8:	99 8b       	std	Y+17, r25	; 0x11
	u8 DigitNumber;
	s8 Counter = -1 , Display;
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[10];
	do
	{
		Counter++;
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
		DigitNumber = Numper % 10;
    2ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ac6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ac8:	a8 89       	ldd	r26, Y+16	; 0x10
    2aca:	b9 89       	ldd	r27, Y+17	; 0x11
    2acc:	2a e0       	ldi	r18, 0x0A	; 10
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	50 e0       	ldi	r21, 0x00	; 0
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__udivmodsi4>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Counter] = DigitNumber + '0';
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	33 27       	eor	r19, r19
    2ae8:	27 fd       	sbrc	r18, 7
    2aea:	30 95       	com	r19
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	48 2f       	mov	r20, r24
    2af0:	40 5d       	subi	r20, 0xD0	; 208
    2af2:	ce 01       	movw	r24, r28
    2af4:	04 96       	adiw	r24, 0x04	; 4
    2af6:	fc 01       	movw	r30, r24
    2af8:	e2 0f       	add	r30, r18
    2afa:	f3 1f       	adc	r31, r19
    2afc:	40 83       	st	Z, r20
		Numper /= 10;
    2afe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b00:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b02:	a8 89       	ldd	r26, Y+16	; 0x10
    2b04:	b9 89       	ldd	r27, Y+17	; 0x11
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__udivmodsi4>
    2b16:	da 01       	movw	r26, r20
    2b18:	c9 01       	movw	r24, r18
    2b1a:	8e 87       	std	Y+14, r24	; 0x0e
    2b1c:	9f 87       	std	Y+15, r25	; 0x0f
    2b1e:	a8 8b       	std	Y+16, r26	; 0x10
    2b20:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Numper != 0);
    2b22:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b24:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b26:	a8 89       	ldd	r26, Y+16	; 0x10
    2b28:	b9 89       	ldd	r27, Y+17	; 0x11
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	a1 05       	cpc	r26, r1
    2b2e:	b1 05       	cpc	r27, r1
    2b30:	31 f6       	brne	.-116    	; 0x2abe <LCD_VoidSendNumber+0x20>
	for(Display = Counter; Display >= 0; Display--)
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	10 c0       	rjmp	.+32     	; 0x2b58 <LCD_VoidSendNumber+0xba>
	{
		LCD_VoidSendDataChar(Array_Number[Display]);
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	33 27       	eor	r19, r19
    2b3e:	27 fd       	sbrc	r18, 7
    2b40:	30 95       	com	r19
    2b42:	ce 01       	movw	r24, r28
    2b44:	04 96       	adiw	r24, 0x04	; 4
    2b46:	fc 01       	movw	r30, r24
    2b48:	e2 0f       	add	r30, r18
    2b4a:	f3 1f       	adc	r31, r19
    2b4c:	80 81       	ld	r24, Z
    2b4e:	0e 94 2e 12 	call	0x245c	; 0x245c <LCD_VoidSendDataChar>
		Counter++;
		DigitNumber = Numper % 10;
		Array_Number[Counter] = DigitNumber + '0';
		Numper /= 10;
	}while(Numper != 0);
	for(Display = Counter; Display >= 0; Display--)
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	81 50       	subi	r24, 0x01	; 1
    2b56:	89 83       	std	Y+1, r24	; 0x01
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	88 23       	and	r24, r24
    2b5c:	6c f7       	brge	.-38     	; 0x2b38 <LCD_VoidSendNumber+0x9a>
	{
		LCD_VoidSendDataChar(Array_Number[Display]);
	}
}
    2b5e:	61 96       	adiw	r28, 0x11	; 17
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <LCD_VoidClear>:

void LCD_VoidClear(void)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(0b0001);
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	0e 94 90 11 	call	0x2320	; 0x2320 <LCD_VoidSendCommand>
}
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <Blutooth_Init>:

#include "USART_interface.h"
#include "Bluetooth_interface.h"

void Blutooth_Init(void)
{
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
	USART_voidInit();
    2b8c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <USART_voidInit>
}
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <Blutooth_SendChar>:

void Blutooth_SendChar(u16 Copy_u8Char)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <Blutooth_SendChar+0x6>
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	9a 83       	std	Y+2, r25	; 0x02
    2ba2:	89 83       	std	Y+1, r24	; 0x01
	USART_voidSendCharSynch(Copy_u8Char);
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <USART_voidSendCharSynch>
}
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <Blutooth_SendString>:

void Blutooth_SendString(char* Copy_pcString)
{
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <Blutooth_SendString+0x6>
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pcString != NULL)
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	21 f0       	breq	.+8      	; 0x2bd4 <Blutooth_SendString+0x1e>
	{
		USART_u8SendStringSynch(Copy_pcString);
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <USART_u8SendStringSynch>
	}
}
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <Blutooth_ReceiveChar>:

u8 Blutooth_ReceiveChar(void)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	u8 Data=0;
    2be8:	19 82       	std	Y+1, r1	; 0x01
	USART_u8ReceiveCharSynch(&Data);
    2bea:	ce 01       	movw	r24, r28
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <USART_u8ReceiveCharSynch>
	return Data;
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <Blutooth_receiveBuffer>:

void Blutooth_receiveBuffer(u8* Copy_pcBuffer,u8 BufferSize)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <Blutooth_receiveBuffer+0x6>
    2c02:	0f 92       	push	r0
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	9a 83       	std	Y+2, r25	; 0x02
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	6b 83       	std	Y+3, r22	; 0x03
	USART_u8ReceiveBufferSynch(Copy_pcBuffer,BufferSize);
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	9a 81       	ldd	r25, Y+2	; 0x02
    2c12:	6b 81       	ldd	r22, Y+3	; 0x03
    2c14:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <USART_u8ReceiveBufferSynch>
}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <USART_voidInit>:
static u8 USART_u8CharIndex=0;
static u8 USART_u8BufferLength=0;
static u8* USART_pu8Data=NULL;

void USART_voidInit(void)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	00 d0       	rcall	.+0      	; 0x2c2a <USART_voidInit+0x6>
    2c2a:	0f 92       	push	r0
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRCValue=0;
    2c30:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRRValue=0;
    2c32:	1a 82       	std	Y+2, r1	; 0x02
    2c34:	19 82       	std	Y+1, r1	; 0x01
	/*Access UCSRB Value*/
	SET_BIT(Local_u8UCSRCValue,UCSRC_URSEL);
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	80 68       	ori	r24, 0x80	; 128
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
	/*Synchronization mode*/
#if USART_MODE==ASYNCH
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	8f 7b       	andi	r24, 0xBF	; 191
    2c40:	8b 83       	std	Y+3, r24	; 0x03
	/*Choose Speed*/
#if TRANS_SPEED==NORMAL_SPEED
	CLR_BIT(UCSRB,UCSRA_U2X);
    2c42:	aa e2       	ldi	r26, 0x2A	; 42
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	ea e2       	ldi	r30, 0x2A	; 42
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	8d 7f       	andi	r24, 0xFD	; 253
    2c4e:	8c 93       	st	X, r24
	Local_u16UBRRValue=(500000ul/(u32)BAUD_RATE)-1;
    2c50:	83 e3       	ldi	r24, 0x33	; 51
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
	Local_u16UBRRValue=(4000000ul/(u32)BAUD_RATE)-1;
#else
#error "Wrong USART Mode"
#endif
	/*Parity Mode*/
	Local_u8UCSRCValue&=PARITY_MASK;
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	8f 7c       	andi	r24, 0xCF	; 207
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRCValue|=PARITY_MODE;
	/*NO. of stop bits*/
#if STOP_BIT==ONE_BIT
	CLR_BIT(Local_u8UCSRCValue,UCSRC_USBS);
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	87 7f       	andi	r24, 0xF7	; 247
    2c62:	8b 83       	std	Y+3, r24	; 0x03
#if DATA_BIT==NINE_BIT
	SET_BIT(UCSRB,UCSRB_UCSZ2);
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
#elif DATA_BIT<NINE_BIT
	Local_u8UCSRCValue&=DATA_MASK;
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	89 7f       	andi	r24, 0xF9	; 249
    2c68:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8UCSRCValue|=DATA_BIT;
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	86 60       	ori	r24, 0x06	; 6
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
#else
#error "Wrong Data Bit Number"
#endif
	UCSRC = Local_u8UCSRCValue;
    2c70:	e0 e4       	ldi	r30, 0x40	; 64
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	80 83       	st	Z, r24
	/*Baud Rate*/
	UBRRL=(u8)Local_u16UBRRValue;
    2c78:	e9 e2       	ldi	r30, 0x29	; 41
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	80 83       	st	Z, r24
	UBRRH=(Local_u16UBRRValue>>8);
    2c80:	e0 e4       	ldi	r30, 0x40	; 64
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	89 2f       	mov	r24, r25
    2c8a:	99 27       	eor	r25, r25
    2c8c:	80 83       	st	Z, r24
	/*Enable the Transmit and Receive modes*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    2c8e:	aa e2       	ldi	r26, 0x2A	; 42
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	ea e2       	ldi	r30, 0x2A	; 42
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	88 60       	ori	r24, 0x08	; 8
    2c9a:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);
    2c9c:	aa e2       	ldi	r26, 0x2A	; 42
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	ea e2       	ldi	r30, 0x2A	; 42
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	80 61       	ori	r24, 0x10	; 16
    2ca8:	8c 93       	st	X, r24
}
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <USART_voidSendCharSynch>:

u8 USART_voidSendCharSynch(u16 Copy_u16Data)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	27 97       	sbiw	r28, 0x07	; 7
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	9f 83       	std	Y+7, r25	; 0x07
    2ccc:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8StateError=OK;
    2cce:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter=0;
    2cd0:	19 82       	std	Y+1, r1	; 0x01
    2cd2:	1a 82       	std	Y+2, r1	; 0x02
    2cd4:	1b 82       	std	Y+3, r1	; 0x03
    2cd6:	1c 82       	std	Y+4, r1	; 0x04
	if(USART_u8BusyState==IDLE)
    2cd8:	80 91 68 01 	lds	r24, 0x0168
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <USART_voidSendCharSynch+0x2c>
    2ce0:	45 c0       	rjmp	.+138    	; 0x2d6c <USART_voidSendCharSynch+0xb6>
	{
		/*Make USART Busy*/
		USART_u8BusyState=BUSY;
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	80 93 68 01 	sts	0x0168, r24
    2ce8:	0b c0       	rjmp	.+22     	; 0x2d00 <USART_voidSendCharSynch+0x4a>
		/*Busy Waiting For Data Register Empty*/
		while((GET_BIT(UCSRA,UCSRA_UDRE)==0) && (Local_u32Counter<USART_TIMEOUT))
		{
			Local_u32Counter++;
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	ab 81       	ldd	r26, Y+3	; 0x03
    2cf0:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	a1 1d       	adc	r26, r1
    2cf6:	b1 1d       	adc	r27, r1
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	ab 83       	std	Y+3, r26	; 0x03
    2cfe:	bc 83       	std	Y+4, r27	; 0x04
	if(USART_u8BusyState==IDLE)
	{
		/*Make USART Busy*/
		USART_u8BusyState=BUSY;
		/*Busy Waiting For Data Register Empty*/
		while((GET_BIT(UCSRA,UCSRA_UDRE)==0) && (Local_u32Counter<USART_TIMEOUT))
    2d00:	eb e2       	ldi	r30, 0x2B	; 43
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	82 95       	swap	r24
    2d08:	86 95       	lsr	r24
    2d0a:	87 70       	andi	r24, 0x07	; 7
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	81 70       	andi	r24, 0x01	; 1
    2d12:	90 70       	andi	r25, 0x00	; 0
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	61 f4       	brne	.+24     	; 0x2d30 <USART_voidSendCharSynch+0x7a>
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d20:	80 35       	cpi	r24, 0x50	; 80
    2d22:	23 ec       	ldi	r18, 0xC3	; 195
    2d24:	92 07       	cpc	r25, r18
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	a2 07       	cpc	r26, r18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	b2 07       	cpc	r27, r18
    2d2e:	e8 f2       	brcs	.-70     	; 0x2cea <USART_voidSendCharSynch+0x34>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==USART_TIMEOUT)
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	ab 81       	ldd	r26, Y+3	; 0x03
    2d36:	bc 81       	ldd	r27, Y+4	; 0x04
    2d38:	80 35       	cpi	r24, 0x50	; 80
    2d3a:	23 ec       	ldi	r18, 0xC3	; 195
    2d3c:	92 07       	cpc	r25, r18
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	a2 07       	cpc	r26, r18
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	b2 07       	cpc	r27, r18
    2d46:	19 f4       	brne	.+6      	; 0x2d4e <USART_voidSendCharSynch+0x98>
		{
			Local_u8StateError=NOK;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	11 c0       	rjmp	.+34     	; 0x2d70 <USART_voidSendCharSynch+0xba>
		}
		else
		{
			/*clear transmit complete flag*/
			SET_BIT(UCSRA,UCSRA_UDRE);
    2d4e:	ab e2       	ldi	r26, 0x2B	; 43
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	eb e2       	ldi	r30, 0x2B	; 43
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	80 62       	ori	r24, 0x20	; 32
    2d5a:	8c 93       	st	X, r24
#if DATA_BIT==NINE_BIT
			UDR=(u8)Copy_u16Data;
			UCSRB|=(Copy_u16Data>>8);
			USART_u8BusyState=IDLE;
#elif DATA_BIT<NINE_BIT
			UDR=(u8)Copy_u16Data;
    2d5c:	ec e2       	ldi	r30, 0x2C	; 44
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	8e 81       	ldd	r24, Y+6	; 0x06
    2d62:	80 83       	st	Z, r24
			USART_u8BusyState=IDLE;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	80 93 68 01 	sts	0x0168, r24
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <USART_voidSendCharSynch+0xba>
#endif
		}
	}
	else
	{
		Local_u8StateError=BUSY_FUNC;
    2d6c:	83 e0       	ldi	r24, 0x03	; 3
    2d6e:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8StateError;
    2d70:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d72:	27 96       	adiw	r28, 0x07	; 7
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <USART_voidSendCharAsynch>:

u8 USART_voidSendCharAsynch(u16 Copy_u16Data, void (*Copy_pvNotificationFunc)(void))
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <USART_voidSendCharAsynch+0x6>
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <USART_voidSendCharAsynch+0x8>
    2d8c:	0f 92       	push	r0
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	9b 83       	std	Y+3, r25	; 0x03
    2d94:	8a 83       	std	Y+2, r24	; 0x02
    2d96:	7d 83       	std	Y+5, r23	; 0x05
    2d98:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8StateError=OK;
    2d9a:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState==IDLE)
    2d9c:	80 91 68 01 	lds	r24, 0x0168
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	01 f5       	brne	.+64     	; 0x2de4 <USART_voidSendCharAsynch+0x60>
	{
		if(Copy_pvNotificationFunc==NULL)
    2da4:	8c 81       	ldd	r24, Y+4	; 0x04
    2da6:	9d 81       	ldd	r25, Y+5	; 0x05
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	19 f4       	brne	.+6      	; 0x2db2 <USART_voidSendCharAsynch+0x2e>
		{
			Local_u8StateError=NULL_POINTER;
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	19 c0       	rjmp	.+50     	; 0x2de4 <USART_voidSendCharAsynch+0x60>
		}
		else
		{
			/*Busy Waiting For Data Register Empty*/
			USART_u8BusyState=BUSY;
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	80 93 68 01 	sts	0x0168, r24
			/*Configure ISR Source As Sending Character*/
			USART_u8ISRSource=SEND_CHAR;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	80 93 80 01 	sts	0x0180, r24
			USART_pvCallBackFunc=Copy_pvNotificationFunc;
    2dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc2:	90 93 7b 01 	sts	0x017B, r25
    2dc6:	80 93 7a 01 	sts	0x017A, r24
			USART_u16SentData=Copy_u16Data;
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dce:	90 93 7d 01 	sts	0x017D, r25
    2dd2:	80 93 7c 01 	sts	0x017C, r24
			/*USART Data Register Empty Interrupt Enable*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    2dd6:	aa e2       	ldi	r26, 0x2A	; 42
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	ea e2       	ldi	r30, 0x2A	; 42
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	80 62       	ori	r24, 0x20	; 32
    2de2:	8c 93       	st	X, r24
		}
	}
	return Local_u8StateError;
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <USART_u8SendStringSynch>:
u8 USART_u8SendStringSynch(const char* Copy_pcharString)
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <USART_u8SendStringSynch+0x6>
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <USART_u8SendStringSynch+0x8>
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8StateError=OK;
    2e06:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter=0;
    2e08:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pcharString==NULL)
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	99 f4       	brne	.+38     	; 0x2e38 <USART_u8SendStringSynch+0x42>
	{
		Local_u8StateError=NULL_POINTER;
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	8a 83       	std	Y+2, r24	; 0x02
    2e16:	1b c0       	rjmp	.+54     	; 0x2e4e <USART_u8SendStringSynch+0x58>
	else
	{
		/*Send All Characters until the string ended*/
		while(Copy_pcharString[Local_u8Counter]!='\0')
		{
			USART_voidSendCharSynch(Copy_pcharString[Local_u8Counter]);
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	9c 81       	ldd	r25, Y+4	; 0x04
    2e22:	fc 01       	movw	r30, r24
    2e24:	e2 0f       	add	r30, r18
    2e26:	f3 1f       	adc	r31, r19
    2e28:	80 81       	ld	r24, Z
    2e2a:	88 2f       	mov	r24, r24
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <USART_voidSendCharSynch>
			Local_u8Counter++;
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	8f 5f       	subi	r24, 0xFF	; 255
    2e36:	89 83       	std	Y+1, r24	; 0x01
		Local_u8StateError=NULL_POINTER;
	}
	else
	{
		/*Send All Characters until the string ended*/
		while(Copy_pcharString[Local_u8Counter]!='\0')
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	fc 01       	movw	r30, r24
    2e44:	e2 0f       	add	r30, r18
    2e46:	f3 1f       	adc	r31, r19
    2e48:	80 81       	ld	r24, Z
    2e4a:	88 23       	and	r24, r24
    2e4c:	29 f7       	brne	.-54     	; 0x2e18 <USART_u8SendStringSynch+0x22>
		{
			USART_voidSendCharSynch(Copy_pcharString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
	return Local_u8StateError;
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <USART_u8SendStringASynch>:
u8 USART_u8SendStringASynch(const char* Copy_pcharString, void(* Copy_pvNotificationFunc)(void))
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <USART_u8SendStringASynch+0x6>
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <USART_u8SendStringASynch+0x8>
    2e66:	0f 92       	push	r0
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	9b 83       	std	Y+3, r25	; 0x03
    2e6e:	8a 83       	std	Y+2, r24	; 0x02
    2e70:	7d 83       	std	Y+5, r23	; 0x05
    2e72:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8StateError=0;
    2e74:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState==IDLE)
    2e76:	80 91 68 01 	lds	r24, 0x0168
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	39 f5       	brne	.+78     	; 0x2ecc <USART_u8SendStringASynch+0x6e>
	{
		if((Copy_pcharString==NULL) || (Copy_pvNotificationFunc==NULL))
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	00 97       	sbiw	r24, 0x00	; 0
    2e84:	21 f0       	breq	.+8      	; 0x2e8e <USART_u8SendStringASynch+0x30>
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	19 f4       	brne	.+6      	; 0x2e94 <USART_u8SendStringASynch+0x36>
		{
			Local_u8StateError=NULL_POINTER;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	1e c0       	rjmp	.+60     	; 0x2ed0 <USART_u8SendStringASynch+0x72>
		}
		else
		{
			/*Make USART Busy*/
			USART_u8BusyState=BUSY;
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	80 93 68 01 	sts	0x0168, r24
			/*Configure ISR Source As Sending String*/
			USART_u8ISRSource=SEND_STRING;
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	80 93 80 01 	sts	0x0180, r24
			/*Initialize the variables & CallBack Notification Function Globally*/
			USART_pcString=Copy_pcharString;
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea4:	90 93 7f 01 	sts	0x017F, r25
    2ea8:	80 93 7e 01 	sts	0x017E, r24
			USART_pvCallBackFunc=Copy_pvNotificationFunc;
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb0:	90 93 7b 01 	sts	0x017B, r25
    2eb4:	80 93 7a 01 	sts	0x017A, r24
			USART_u8CharIndex=0;
    2eb8:	10 92 81 01 	sts	0x0181, r1
			/*USART Data Register Empty Interrupt Enable*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    2ebc:	aa e2       	ldi	r26, 0x2A	; 42
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	ea e2       	ldi	r30, 0x2A	; 42
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	80 62       	ori	r24, 0x20	; 32
    2ec8:	8c 93       	st	X, r24
    2eca:	02 c0       	rjmp	.+4      	; 0x2ed0 <USART_u8SendStringASynch+0x72>
		}
	}
	else
	{
		Local_u8StateError=BUSY_FUNC;
    2ecc:	83 e0       	ldi	r24, 0x03	; 3
    2ece:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8StateError;
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <USART_u8ReceiveCharSynch>:
u8 USART_u8ReceiveCharSynch(u8 *Copy_pu8Data)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <USART_u8ReceiveCharSynch+0x6>
    2ee8:	0f 92       	push	r0
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	9b 83       	std	Y+3, r25	; 0x03
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StateError=OK;
    2ef2:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState==IDLE)
    2ef4:	80 91 68 01 	lds	r24, 0x0168
    2ef8:	81 30       	cpi	r24, 0x01	; 1
    2efa:	c9 f4       	brne	.+50     	; 0x2f2e <USART_u8ReceiveCharSynch+0x4c>
	{
		/*Make USART Busy*/
		USART_u8BusyState=BUSY;
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	80 93 68 01 	sts	0x0168, r24
		/*Busy waiting For receive Complete*/
		while(GET_BIT(UCSRA,UCSRA_RXC)==0);
    2f02:	eb e2       	ldi	r30, 0x2B	; 43
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	88 23       	and	r24, r24
    2f0a:	dc f7       	brge	.-10     	; 0x2f02 <USART_u8ReceiveCharSynch+0x20>
		SET_BIT(UCSRA,UCSRA_RXC);
    2f0c:	ab e2       	ldi	r26, 0x2B	; 43
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	eb e2       	ldi	r30, 0x2B	; 43
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	80 68       	ori	r24, 0x80	; 128
    2f18:	8c 93       	st	X, r24
		/*Send Data*/
		*Copy_pu8Data=UDR;
    2f1a:	ec e2       	ldi	r30, 0x2C	; 44
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	ea 81       	ldd	r30, Y+2	; 0x02
    2f22:	fb 81       	ldd	r31, Y+3	; 0x03
    2f24:	80 83       	st	Z, r24
		/*Make USART IDLE*/
		USART_u8BusyState=IDLE;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	80 93 68 01 	sts	0x0168, r24
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <USART_u8ReceiveCharSynch+0x50>
	}
	else
	{
		Local_u8StateError=BUSY_FUNC;
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
    2f30:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8StateError;
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	08 95       	ret

00002f40 <USART_u8ReceiveCharASynch>:
u8 USART_u8ReceiveCharASynch(u8 *Copy_pu8Data, void (*Copy_pvNotificationFunc)(void))
{
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <USART_u8ReceiveCharASynch+0x6>
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <USART_u8ReceiveCharASynch+0x8>
    2f48:	0f 92       	push	r0
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	9b 83       	std	Y+3, r25	; 0x03
    2f50:	8a 83       	std	Y+2, r24	; 0x02
    2f52:	7d 83       	std	Y+5, r23	; 0x05
    2f54:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8StateError=OK;
    2f56:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState==IDLE)
    2f58:	80 91 68 01 	lds	r24, 0x0168
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	29 f5       	brne	.+74     	; 0x2faa <USART_u8ReceiveCharASynch+0x6a>
	{
		if((Copy_pu8Data==NULL) || (Copy_pvNotificationFunc==NULL))
    2f60:	8a 81       	ldd	r24, Y+2	; 0x02
    2f62:	9b 81       	ldd	r25, Y+3	; 0x03
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	21 f0       	breq	.+8      	; 0x2f70 <USART_u8ReceiveCharASynch+0x30>
    2f68:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	19 f4       	brne	.+6      	; 0x2f76 <USART_u8ReceiveCharASynch+0x36>
		{
			Local_u8StateError=NULL_POINTER;
    2f70:	82 e0       	ldi	r24, 0x02	; 2
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	1c c0       	rjmp	.+56     	; 0x2fae <USART_u8ReceiveCharASynch+0x6e>
		}
		else
		{
			/*Make USART Busy*/
			USART_u8BusyState=BUSY;
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	80 93 68 01 	sts	0x0168, r24
			/*Configure ISR Source As Receiving Character*/
			USART_u8ISRSource=RECEIVE_CHAR;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	80 93 80 01 	sts	0x0180, r24
			Copy_pu8Data=USART_pu8Data;
    2f82:	80 91 83 01 	lds	r24, 0x0183
    2f86:	90 91 84 01 	lds	r25, 0x0184
    2f8a:	9b 83       	std	Y+3, r25	; 0x03
    2f8c:	8a 83       	std	Y+2, r24	; 0x02
			USART_pvCallBackFunc=Copy_pvNotificationFunc;
    2f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f90:	9d 81       	ldd	r25, Y+5	; 0x05
    2f92:	90 93 7b 01 	sts	0x017B, r25
    2f96:	80 93 7a 01 	sts	0x017A, r24
			/*Receive Complete Interrupt Enable*/
			SET_BIT(UCSRB,UCSRB_RXCIE);
    2f9a:	aa e2       	ldi	r26, 0x2A	; 42
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	ea e2       	ldi	r30, 0x2A	; 42
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	80 68       	ori	r24, 0x80	; 128
    2fa6:	8c 93       	st	X, r24
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <USART_u8ReceiveCharASynch+0x6e>
		}
	}
	else
	{
		Local_u8StateError=BUSY_FUNC;
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8StateError;
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <USART_u8ReceiveBufferSynch>:

u8 USART_u8ReceiveBufferSynch(u8* Copy_pu8Buffer,u8 Copy_u8BufferSize)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <USART_u8ReceiveBufferSynch+0x6>
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <USART_u8ReceiveBufferSynch+0x8>
    2fc8:	0f 92       	push	r0
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	9c 83       	std	Y+4, r25	; 0x04
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
    2fd2:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8StateError=OK;
    2fd4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter=0;
    2fd6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Buffer==NULL)
    2fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fda:	9c 81       	ldd	r25, Y+4	; 0x04
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	11 f4       	brne	.+4      	; 0x2fe4 <USART_u8ReceiveBufferSynch+0x24>
	{
		Local_u8StateError=NULL_POINTER;
    2fe0:	82 e0       	ldi	r24, 0x02	; 2
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
	}
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8BufferSize;Local_u8Counter++)
    2fe4:	19 82       	std	Y+1, r1	; 0x01
    2fe6:	0c c0       	rjmp	.+24     	; 0x3000 <USART_u8ReceiveBufferSynch+0x40>
	{
		/*Receive Buffer in Array*/
		USART_u8ReceiveCharSynch(&Copy_pu8Buffer[Local_u8Counter]);
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff2:	82 0f       	add	r24, r18
    2ff4:	93 1f       	adc	r25, r19
    2ff6:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <USART_u8ReceiveCharSynch>
	u8 Local_u8Counter=0;
	if(Copy_pu8Buffer==NULL)
	{
		Local_u8StateError=NULL_POINTER;
	}
	for(Local_u8Counter=0;Local_u8Counter<Copy_u8BufferSize;Local_u8Counter++)
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    3000:	99 81       	ldd	r25, Y+1	; 0x01
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	98 17       	cp	r25, r24
    3006:	80 f3       	brcs	.-32     	; 0x2fe8 <USART_u8ReceiveBufferSynch+0x28>
	{
		/*Receive Buffer in Array*/
		USART_u8ReceiveCharSynch(&Copy_pu8Buffer[Local_u8Counter]);
	}
	return Local_u8StateError;
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <USART_u8ReceiveBufferASynch>:

u8 USART_u8ReceiveBufferASynch(u8* Copy_pu8Buffer,u8 Copy_u8BufferSize, void (*Copy_pvNotificationFunc)(void))
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <USART_u8ReceiveBufferASynch+0x6>
    3020:	00 d0       	rcall	.+0      	; 0x3022 <USART_u8ReceiveBufferASynch+0x8>
    3022:	00 d0       	rcall	.+0      	; 0x3024 <USART_u8ReceiveBufferASynch+0xa>
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	9b 83       	std	Y+3, r25	; 0x03
    302a:	8a 83       	std	Y+2, r24	; 0x02
    302c:	6c 83       	std	Y+4, r22	; 0x04
    302e:	5e 83       	std	Y+6, r21	; 0x06
    3030:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8StateError=OK;
    3032:	19 82       	std	Y+1, r1	; 0x01
	if(USART_u8BusyState==IDLE)
    3034:	80 91 68 01 	lds	r24, 0x0168
    3038:	81 30       	cpi	r24, 0x01	; 1
    303a:	39 f5       	brne	.+78     	; 0x308a <USART_u8ReceiveBufferASynch+0x70>
	{
		if((Copy_pu8Buffer==NULL) || (Copy_pvNotificationFunc==NULL))
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	21 f0       	breq	.+8      	; 0x304c <USART_u8ReceiveBufferASynch+0x32>
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	19 f4       	brne	.+6      	; 0x3052 <USART_u8ReceiveBufferASynch+0x38>
		{
			Local_u8StateError=NULL_POINTER;
    304c:	82 e0       	ldi	r24, 0x02	; 2
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	1e c0       	rjmp	.+60     	; 0x308e <USART_u8ReceiveBufferASynch+0x74>
		}
		else
		{
			/*Make USART Busy*/
			USART_u8BusyState=BUSY;
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	80 93 68 01 	sts	0x0168, r24
			/*Configure ISR Source As Receiving String*/
			USART_u8ISRSource=RECEIVE_STRING;
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	80 93 80 01 	sts	0x0180, r24
			/*Initialize the variables & CallBack Notification Function Globally*/
			USART_u8CharIndex=0;
    305e:	10 92 81 01 	sts	0x0181, r1
			Copy_pu8Buffer=USART_pu8Data;
    3062:	80 91 83 01 	lds	r24, 0x0183
    3066:	90 91 84 01 	lds	r25, 0x0184
    306a:	9b 83       	std	Y+3, r25	; 0x03
    306c:	8a 83       	std	Y+2, r24	; 0x02
			USART_pvCallBackFunc=Copy_pvNotificationFunc;
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	90 93 7b 01 	sts	0x017B, r25
    3076:	80 93 7a 01 	sts	0x017A, r24
			/*Receive Complete Interrupt Enable*/
			SET_BIT(UCSRB,UCSRB_RXCIE);
    307a:	aa e2       	ldi	r26, 0x2A	; 42
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ea e2       	ldi	r30, 0x2A	; 42
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	80 68       	ori	r24, 0x80	; 128
    3086:	8c 93       	st	X, r24
    3088:	02 c0       	rjmp	.+4      	; 0x308e <USART_u8ReceiveBufferASynch+0x74>
		}
	}
	else
	{
		Local_u8StateError=BUSY_FUNC;
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8StateError;
    308e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3090:	26 96       	adiw	r28, 0x06	; 6
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	cf 91       	pop	r28
    309e:	df 91       	pop	r29
    30a0:	08 95       	ret

000030a2 <__vector_14>:

void __vector_14 ( void) __attribute__((signal));
void __vector_14 (void)
{
    30a2:	1f 92       	push	r1
    30a4:	0f 92       	push	r0
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	0f 92       	push	r0
    30aa:	11 24       	eor	r1, r1
    30ac:	2f 93       	push	r18
    30ae:	3f 93       	push	r19
    30b0:	4f 93       	push	r20
    30b2:	5f 93       	push	r21
    30b4:	6f 93       	push	r22
    30b6:	7f 93       	push	r23
    30b8:	8f 93       	push	r24
    30ba:	9f 93       	push	r25
    30bc:	af 93       	push	r26
    30be:	bf 93       	push	r27
    30c0:	ef 93       	push	r30
    30c2:	ff 93       	push	r31
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
	if(USART_u8ISRSource==SEND_CHAR)
    30cc:	80 91 80 01 	lds	r24, 0x0180
    30d0:	81 30       	cpi	r24, 0x01	; 1
    30d2:	b9 f4       	brne	.+46     	; 0x3102 <__vector_14+0x60>
		/*Send Data*/
#if DATA_BIT==NINE_BIT_BIT
		UDR=(u8)USART_u16SentData;
		UCSRB|=(USART_u16SentData>>8);
#elif DATA_BIT<NINE_BIT
		UDR=(u8)USART_u16SentData;
    30d4:	ec e2       	ldi	r30, 0x2C	; 44
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 91 7c 01 	lds	r24, 0x017C
    30dc:	90 91 7d 01 	lds	r25, 0x017D
    30e0:	80 83       	st	Z, r24
#endif
		/*Make USART Busy State Idle*/
		USART_u8BusyState=IDLE;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	80 93 68 01 	sts	0x0168, r24
		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    30e8:	aa e2       	ldi	r26, 0x2A	; 42
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	ea e2       	ldi	r30, 0x2A	; 42
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	8f 7d       	andi	r24, 0xDF	; 223
    30f4:	8c 93       	st	X, r24
		/*Invoke the call Back Notification*/
		USART_pvCallBackFunc();
    30f6:	e0 91 7a 01 	lds	r30, 0x017A
    30fa:	f0 91 7b 01 	lds	r31, 0x017B
    30fe:	09 95       	icall
    3100:	35 c0       	rjmp	.+106    	; 0x316c <__vector_14+0xca>
	}
	else if(USART_u8ISRSource==SEND_STRING)
    3102:	80 91 80 01 	lds	r24, 0x0180
    3106:	82 30       	cpi	r24, 0x02	; 2
    3108:	89 f5       	brne	.+98     	; 0x316c <__vector_14+0xca>
	{
		UDR=USART_pcString[USART_u8CharIndex];
    310a:	ac e2       	ldi	r26, 0x2C	; 44
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	20 91 7e 01 	lds	r18, 0x017E
    3112:	30 91 7f 01 	lds	r19, 0x017F
    3116:	80 91 81 01 	lds	r24, 0x0181
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	f9 01       	movw	r30, r18
    3120:	e8 0f       	add	r30, r24
    3122:	f9 1f       	adc	r31, r25
    3124:	80 81       	ld	r24, Z
    3126:	8c 93       	st	X, r24
		USART_u8CharIndex++;
    3128:	80 91 81 01 	lds	r24, 0x0181
    312c:	8f 5f       	subi	r24, 0xFF	; 255
    312e:	80 93 81 01 	sts	0x0181, r24
		if(USART_pcString[USART_u8CharIndex]=='\0')
    3132:	20 91 7e 01 	lds	r18, 0x017E
    3136:	30 91 7f 01 	lds	r19, 0x017F
    313a:	80 91 81 01 	lds	r24, 0x0181
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	f9 01       	movw	r30, r18
    3144:	e8 0f       	add	r30, r24
    3146:	f9 1f       	adc	r31, r25
    3148:	80 81       	ld	r24, Z
    314a:	88 23       	and	r24, r24
    314c:	79 f4       	brne	.+30     	; 0x316c <__vector_14+0xca>
		{
			/*Make USART Busy State Idle*/
			USART_u8BusyState=IDLE;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	80 93 68 01 	sts	0x0168, r24
			/*Disable USART Data Register Empty Interrupt*/
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    3154:	aa e2       	ldi	r26, 0x2A	; 42
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	ea e2       	ldi	r30, 0x2A	; 42
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	8f 7d       	andi	r24, 0xDF	; 223
    3160:	8c 93       	st	X, r24
			/*Invoke the call Back Notification*/
			USART_pvCallBackFunc();
    3162:	e0 91 7a 01 	lds	r30, 0x017A
    3166:	f0 91 7b 01 	lds	r31, 0x017B
    316a:	09 95       	icall
		}
	}
}
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	ff 91       	pop	r31
    3172:	ef 91       	pop	r30
    3174:	bf 91       	pop	r27
    3176:	af 91       	pop	r26
    3178:	9f 91       	pop	r25
    317a:	8f 91       	pop	r24
    317c:	7f 91       	pop	r23
    317e:	6f 91       	pop	r22
    3180:	5f 91       	pop	r21
    3182:	4f 91       	pop	r20
    3184:	3f 91       	pop	r19
    3186:	2f 91       	pop	r18
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	0f 90       	pop	r0
    318e:	1f 90       	pop	r1
    3190:	18 95       	reti

00003192 <__vector_13>:
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    3192:	1f 92       	push	r1
    3194:	0f 92       	push	r0
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	0f 92       	push	r0
    319a:	11 24       	eor	r1, r1
    319c:	2f 93       	push	r18
    319e:	3f 93       	push	r19
    31a0:	4f 93       	push	r20
    31a2:	5f 93       	push	r21
    31a4:	6f 93       	push	r22
    31a6:	7f 93       	push	r23
    31a8:	8f 93       	push	r24
    31aa:	9f 93       	push	r25
    31ac:	af 93       	push	r26
    31ae:	bf 93       	push	r27
    31b0:	ef 93       	push	r30
    31b2:	ff 93       	push	r31
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
	if(USART_u8ISRSource==RECEIVE_CHAR)
    31bc:	80 91 80 01 	lds	r24, 0x0180
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	c1 f4       	brne	.+48     	; 0x31f4 <__vector_13+0x62>
	{
		*USART_pu8Data=UDR;
    31c4:	a0 91 83 01 	lds	r26, 0x0183
    31c8:	b0 91 84 01 	lds	r27, 0x0184
    31cc:	ec e2       	ldi	r30, 0x2C	; 44
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	8c 93       	st	X, r24
		/*Make USART Busy State Idle*/
		USART_u8BusyState=IDLE;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	80 93 68 01 	sts	0x0168, r24
		/*Receive Complete Interrupt Disable*/
		CLR_BIT(UCSRB,UCSRB_RXCIE);
    31da:	aa e2       	ldi	r26, 0x2A	; 42
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	ea e2       	ldi	r30, 0x2A	; 42
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	8f 77       	andi	r24, 0x7F	; 127
    31e6:	8c 93       	st	X, r24
		/*Invoke the call Back Notification*/
		USART_pvCallBackFunc();
    31e8:	e0 91 7a 01 	lds	r30, 0x017A
    31ec:	f0 91 7b 01 	lds	r31, 0x017B
    31f0:	09 95       	icall
    31f2:	2d c0       	rjmp	.+90     	; 0x324e <__vector_13+0xbc>
	}
	else if(USART_u8ISRSource==RECEIVE_STRING)
    31f4:	80 91 80 01 	lds	r24, 0x0180
    31f8:	82 30       	cpi	r24, 0x02	; 2
    31fa:	49 f5       	brne	.+82     	; 0x324e <__vector_13+0xbc>
	{
		USART_pu8Data[USART_u8CharIndex]=UDR;
    31fc:	20 91 83 01 	lds	r18, 0x0183
    3200:	30 91 84 01 	lds	r19, 0x0184
    3204:	80 91 81 01 	lds	r24, 0x0181
    3208:	88 2f       	mov	r24, r24
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	d9 01       	movw	r26, r18
    320e:	a8 0f       	add	r26, r24
    3210:	b9 1f       	adc	r27, r25
    3212:	ec e2       	ldi	r30, 0x2C	; 44
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	8c 93       	st	X, r24
		USART_u8CharIndex++;
    321a:	80 91 81 01 	lds	r24, 0x0181
    321e:	8f 5f       	subi	r24, 0xFF	; 255
    3220:	80 93 81 01 	sts	0x0181, r24
		if(USART_u8CharIndex==USART_u8BufferLength)
    3224:	90 91 81 01 	lds	r25, 0x0181
    3228:	80 91 82 01 	lds	r24, 0x0182
    322c:	98 17       	cp	r25, r24
    322e:	79 f4       	brne	.+30     	; 0x324e <__vector_13+0xbc>
		{
			USART_u8BusyState=IDLE;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	80 93 68 01 	sts	0x0168, r24
			/*Receive Complete Interrupt Disable*/
			CLR_BIT(UCSRB,UCSRB_RXCIE);
    3236:	aa e2       	ldi	r26, 0x2A	; 42
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	ea e2       	ldi	r30, 0x2A	; 42
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	8f 77       	andi	r24, 0x7F	; 127
    3242:	8c 93       	st	X, r24
			/*Invoke the call Back Notification*/
			USART_pvCallBackFunc();
    3244:	e0 91 7a 01 	lds	r30, 0x017A
    3248:	f0 91 7b 01 	lds	r31, 0x017B
    324c:	09 95       	icall
		}
	}
}
    324e:	cf 91       	pop	r28
    3250:	df 91       	pop	r29
    3252:	ff 91       	pop	r31
    3254:	ef 91       	pop	r30
    3256:	bf 91       	pop	r27
    3258:	af 91       	pop	r26
    325a:	9f 91       	pop	r25
    325c:	8f 91       	pop	r24
    325e:	7f 91       	pop	r23
    3260:	6f 91       	pop	r22
    3262:	5f 91       	pop	r21
    3264:	4f 91       	pop	r20
    3266:	3f 91       	pop	r19
    3268:	2f 91       	pop	r18
    326a:	0f 90       	pop	r0
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	0f 90       	pop	r0
    3270:	1f 90       	pop	r1
    3272:	18 95       	reti

00003274 <main>:
#include <avr/io.h>
#include <util/delay.h>



void main(void) {
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	6d 97       	sbiw	r28, 0x1d	; 29
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61

	Blutooth_Init();
    3288:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <Blutooth_Init>
	Servo_VoidInitD4();
    328c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <Servo_VoidInitD4>
	u8 blu ;
	DIO_VoidSetPinNumDir(DIO_GroupC,DIO_Pin7,Output_Pin);
    3290:	83 e0       	ldi	r24, 0x03	; 3
    3292:	67 e0       	ldi	r22, 0x07	; 7
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinNumDir>
	DIO_VoidSetPinNumDir(DIO_GroupC,DIO_Pin6,Output_Pin);
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	66 e0       	ldi	r22, 0x06	; 6
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <DIO_VoidSetPinNumDir>
	while (1) {

		blu=Blutooth_ReceiveChar();
    32a4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <Blutooth_ReceiveChar>
    32a8:	8d 8f       	std	Y+29, r24	; 0x1d

		if(blu== 'o')
    32aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ac:	8f 36       	cpi	r24, 0x6F	; 111
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <main+0x3e>
    32b0:	80 c0       	rjmp	.+256    	; 0x33b2 <main+0x13e>
		{
			DIO_VoidSetPinNumValue(DIO_GroupC,DIO_Pin7,High_Pin);
    32b2:	83 e0       	ldi	r24, 0x03	; 3
    32b4:	67 e0       	ldi	r22, 0x07	; 7
    32b6:	41 e0       	ldi	r20, 0x01	; 1
    32b8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
			DIO_VoidSetPinNumValue(DIO_GroupC,DIO_Pin6,Low_Pin);
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	66 e0       	ldi	r22, 0x06	; 6
    32c0:	40 e0       	ldi	r20, 0x00	; 0
    32c2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
			Servo_VoidRotateAngleD4(180);
    32c6:	84 eb       	ldi	r24, 0xB4	; 180
    32c8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <Servo_VoidRotateAngleD4>
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	a8 ec       	ldi	r26, 0xC8	; 200
    32d2:	b2 e4       	ldi	r27, 0x42	; 66
    32d4:	89 8f       	std	Y+25, r24	; 0x19
    32d6:	9a 8f       	std	Y+26, r25	; 0x1a
    32d8:	ab 8f       	std	Y+27, r26	; 0x1b
    32da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32dc:	69 8d       	ldd	r22, Y+25	; 0x19
    32de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	4a ef       	ldi	r20, 0xFA	; 250
    32ea:	54 e4       	ldi	r21, 0x44	; 68
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	8d 8b       	std	Y+21, r24	; 0x15
    32f6:	9e 8b       	std	Y+22, r25	; 0x16
    32f8:	af 8b       	std	Y+23, r26	; 0x17
    32fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32fc:	6d 89       	ldd	r22, Y+21	; 0x15
    32fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3300:	8f 89       	ldd	r24, Y+23	; 0x17
    3302:	98 8d       	ldd	r25, Y+24	; 0x18
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e8       	ldi	r20, 0x80	; 128
    330a:	5f e3       	ldi	r21, 0x3F	; 63
    330c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3310:	88 23       	and	r24, r24
    3312:	2c f4       	brge	.+10     	; 0x331e <main+0xaa>
		__ticks = 1;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9c 8b       	std	Y+20, r25	; 0x14
    331a:	8b 8b       	std	Y+19, r24	; 0x13
    331c:	3f c0       	rjmp	.+126    	; 0x339c <main+0x128>
	else if (__tmp > 65535)
    331e:	6d 89       	ldd	r22, Y+21	; 0x15
    3320:	7e 89       	ldd	r23, Y+22	; 0x16
    3322:	8f 89       	ldd	r24, Y+23	; 0x17
    3324:	98 8d       	ldd	r25, Y+24	; 0x18
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	4f e7       	ldi	r20, 0x7F	; 127
    332c:	57 e4       	ldi	r21, 0x47	; 71
    332e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3332:	18 16       	cp	r1, r24
    3334:	4c f5       	brge	.+82     	; 0x3388 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3336:	69 8d       	ldd	r22, Y+25	; 0x19
    3338:	7a 8d       	ldd	r23, Y+26	; 0x1a
    333a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    333c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e2       	ldi	r20, 0x20	; 32
    3344:	51 e4       	ldi	r21, 0x41	; 65
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	9c 8b       	std	Y+20, r25	; 0x14
    335c:	8b 8b       	std	Y+19, r24	; 0x13
    335e:	0f c0       	rjmp	.+30     	; 0x337e <main+0x10a>
    3360:	88 ec       	ldi	r24, 0xC8	; 200
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	9a 8b       	std	Y+18, r25	; 0x12
    3366:	89 8b       	std	Y+17, r24	; 0x11
    3368:	89 89       	ldd	r24, Y+17	; 0x11
    336a:	9a 89       	ldd	r25, Y+18	; 0x12
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <main+0xf8>
    3370:	9a 8b       	std	Y+18, r25	; 0x12
    3372:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3374:	8b 89       	ldd	r24, Y+19	; 0x13
    3376:	9c 89       	ldd	r25, Y+20	; 0x14
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	9c 8b       	std	Y+20, r25	; 0x14
    337c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337e:	8b 89       	ldd	r24, Y+19	; 0x13
    3380:	9c 89       	ldd	r25, Y+20	; 0x14
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	69 f7       	brne	.-38     	; 0x3360 <main+0xec>
    3386:	8e cf       	rjmp	.-228    	; 0x32a4 <main+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3388:	6d 89       	ldd	r22, Y+21	; 0x15
    338a:	7e 89       	ldd	r23, Y+22	; 0x16
    338c:	8f 89       	ldd	r24, Y+23	; 0x17
    338e:	98 8d       	ldd	r25, Y+24	; 0x18
    3390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	9c 8b       	std	Y+20, r25	; 0x14
    339a:	8b 8b       	std	Y+19, r24	; 0x13
    339c:	8b 89       	ldd	r24, Y+19	; 0x13
    339e:	9c 89       	ldd	r25, Y+20	; 0x14
    33a0:	98 8b       	std	Y+16, r25	; 0x10
    33a2:	8f 87       	std	Y+15, r24	; 0x0f
    33a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a6:	98 89       	ldd	r25, Y+16	; 0x10
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <main+0x134>
    33ac:	98 8b       	std	Y+16, r25	; 0x10
    33ae:	8f 87       	std	Y+15, r24	; 0x0f
    33b0:	79 cf       	rjmp	.-270    	; 0x32a4 <main+0x30>
			_delay_ms(100);
		}
		else if(blu== 'c')
    33b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b4:	83 36       	cpi	r24, 0x63	; 99
    33b6:	09 f0       	breq	.+2      	; 0x33ba <main+0x146>
    33b8:	75 cf       	rjmp	.-278    	; 0x32a4 <main+0x30>
		{
			DIO_VoidSetPinNumValue(DIO_GroupC,DIO_Pin7,Low_Pin);
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	67 e0       	ldi	r22, 0x07	; 7
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
			DIO_VoidSetPinNumValue(DIO_GroupC,DIO_Pin6,High_Pin);
    33c4:	83 e0       	ldi	r24, 0x03	; 3
    33c6:	66 e0       	ldi	r22, 0x06	; 6
    33c8:	41 e0       	ldi	r20, 0x01	; 1
    33ca:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_VoidSetPinNumValue>
			Servo_VoidRotateAngleD4(0);
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <Servo_VoidRotateAngleD4>
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	a8 ec       	ldi	r26, 0xC8	; 200
    33da:	b2 e4       	ldi	r27, 0x42	; 66
    33dc:	8b 87       	std	Y+11, r24	; 0x0b
    33de:	9c 87       	std	Y+12, r25	; 0x0c
    33e0:	ad 87       	std	Y+13, r26	; 0x0d
    33e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	4a ef       	ldi	r20, 0xFA	; 250
    33f2:	54 e4       	ldi	r21, 0x44	; 68
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	8f 83       	std	Y+7, r24	; 0x07
    33fe:	98 87       	std	Y+8, r25	; 0x08
    3400:	a9 87       	std	Y+9, r26	; 0x09
    3402:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3404:	6f 81       	ldd	r22, Y+7	; 0x07
    3406:	78 85       	ldd	r23, Y+8	; 0x08
    3408:	89 85       	ldd	r24, Y+9	; 0x09
    340a:	9a 85       	ldd	r25, Y+10	; 0x0a
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	40 e8       	ldi	r20, 0x80	; 128
    3412:	5f e3       	ldi	r21, 0x3F	; 63
    3414:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3418:	88 23       	and	r24, r24
    341a:	2c f4       	brge	.+10     	; 0x3426 <main+0x1b2>
		__ticks = 1;
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
    3424:	3f c0       	rjmp	.+126    	; 0x34a4 <main+0x230>
	else if (__tmp > 65535)
    3426:	6f 81       	ldd	r22, Y+7	; 0x07
    3428:	78 85       	ldd	r23, Y+8	; 0x08
    342a:	89 85       	ldd	r24, Y+9	; 0x09
    342c:	9a 85       	ldd	r25, Y+10	; 0x0a
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	3f ef       	ldi	r19, 0xFF	; 255
    3432:	4f e7       	ldi	r20, 0x7F	; 127
    3434:	57 e4       	ldi	r21, 0x47	; 71
    3436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    343a:	18 16       	cp	r1, r24
    343c:	4c f5       	brge	.+82     	; 0x3490 <main+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3440:	7c 85       	ldd	r23, Y+12	; 0x0c
    3442:	8d 85       	ldd	r24, Y+13	; 0x0d
    3444:	9e 85       	ldd	r25, Y+14	; 0x0e
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	40 e2       	ldi	r20, 0x20	; 32
    344c:	51 e4       	ldi	r21, 0x41	; 65
    344e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	bc 01       	movw	r22, r24
    3458:	cd 01       	movw	r24, r26
    345a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	9e 83       	std	Y+6, r25	; 0x06
    3464:	8d 83       	std	Y+5, r24	; 0x05
    3466:	0f c0       	rjmp	.+30     	; 0x3486 <main+0x212>
    3468:	88 ec       	ldi	r24, 0xC8	; 200
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	9c 83       	std	Y+4, r25	; 0x04
    346e:	8b 83       	std	Y+3, r24	; 0x03
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <main+0x200>
    3478:	9c 83       	std	Y+4, r25	; 0x04
    347a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347c:	8d 81       	ldd	r24, Y+5	; 0x05
    347e:	9e 81       	ldd	r25, Y+6	; 0x06
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	9e 83       	std	Y+6, r25	; 0x06
    3484:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	9e 81       	ldd	r25, Y+6	; 0x06
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	69 f7       	brne	.-38     	; 0x3468 <main+0x1f4>
    348e:	0a cf       	rjmp	.-492    	; 0x32a4 <main+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3490:	6f 81       	ldd	r22, Y+7	; 0x07
    3492:	78 85       	ldd	r23, Y+8	; 0x08
    3494:	89 85       	ldd	r24, Y+9	; 0x09
    3496:	9a 85       	ldd	r25, Y+10	; 0x0a
    3498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	9e 83       	std	Y+6, r25	; 0x06
    34a2:	8d 83       	std	Y+5, r24	; 0x05
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	9a 83       	std	Y+2, r25	; 0x02
    34aa:	89 83       	std	Y+1, r24	; 0x01
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	9a 81       	ldd	r25, Y+2	; 0x02
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <main+0x23c>
    34b4:	9a 83       	std	Y+2, r25	; 0x02
    34b6:	89 83       	std	Y+1, r24	; 0x01
    34b8:	f5 ce       	rjmp	.-534    	; 0x32a4 <main+0x30>

000034ba <__udivmodsi4>:
    34ba:	a1 e2       	ldi	r26, 0x21	; 33
    34bc:	1a 2e       	mov	r1, r26
    34be:	aa 1b       	sub	r26, r26
    34c0:	bb 1b       	sub	r27, r27
    34c2:	fd 01       	movw	r30, r26
    34c4:	0d c0       	rjmp	.+26     	; 0x34e0 <__udivmodsi4_ep>

000034c6 <__udivmodsi4_loop>:
    34c6:	aa 1f       	adc	r26, r26
    34c8:	bb 1f       	adc	r27, r27
    34ca:	ee 1f       	adc	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	a2 17       	cp	r26, r18
    34d0:	b3 07       	cpc	r27, r19
    34d2:	e4 07       	cpc	r30, r20
    34d4:	f5 07       	cpc	r31, r21
    34d6:	20 f0       	brcs	.+8      	; 0x34e0 <__udivmodsi4_ep>
    34d8:	a2 1b       	sub	r26, r18
    34da:	b3 0b       	sbc	r27, r19
    34dc:	e4 0b       	sbc	r30, r20
    34de:	f5 0b       	sbc	r31, r21

000034e0 <__udivmodsi4_ep>:
    34e0:	66 1f       	adc	r22, r22
    34e2:	77 1f       	adc	r23, r23
    34e4:	88 1f       	adc	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	1a 94       	dec	r1
    34ea:	69 f7       	brne	.-38     	; 0x34c6 <__udivmodsi4_loop>
    34ec:	60 95       	com	r22
    34ee:	70 95       	com	r23
    34f0:	80 95       	com	r24
    34f2:	90 95       	com	r25
    34f4:	9b 01       	movw	r18, r22
    34f6:	ac 01       	movw	r20, r24
    34f8:	bd 01       	movw	r22, r26
    34fa:	cf 01       	movw	r24, r30
    34fc:	08 95       	ret

000034fe <__prologue_saves__>:
    34fe:	2f 92       	push	r2
    3500:	3f 92       	push	r3
    3502:	4f 92       	push	r4
    3504:	5f 92       	push	r5
    3506:	6f 92       	push	r6
    3508:	7f 92       	push	r7
    350a:	8f 92       	push	r8
    350c:	9f 92       	push	r9
    350e:	af 92       	push	r10
    3510:	bf 92       	push	r11
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	ca 1b       	sub	r28, r26
    3528:	db 0b       	sbc	r29, r27
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	f8 94       	cli
    352e:	de bf       	out	0x3e, r29	; 62
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	cd bf       	out	0x3d, r28	; 61
    3534:	09 94       	ijmp

00003536 <__epilogue_restores__>:
    3536:	2a 88       	ldd	r2, Y+18	; 0x12
    3538:	39 88       	ldd	r3, Y+17	; 0x11
    353a:	48 88       	ldd	r4, Y+16	; 0x10
    353c:	5f 84       	ldd	r5, Y+15	; 0x0f
    353e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3540:	7d 84       	ldd	r7, Y+13	; 0x0d
    3542:	8c 84       	ldd	r8, Y+12	; 0x0c
    3544:	9b 84       	ldd	r9, Y+11	; 0x0b
    3546:	aa 84       	ldd	r10, Y+10	; 0x0a
    3548:	b9 84       	ldd	r11, Y+9	; 0x09
    354a:	c8 84       	ldd	r12, Y+8	; 0x08
    354c:	df 80       	ldd	r13, Y+7	; 0x07
    354e:	ee 80       	ldd	r14, Y+6	; 0x06
    3550:	fd 80       	ldd	r15, Y+5	; 0x05
    3552:	0c 81       	ldd	r16, Y+4	; 0x04
    3554:	1b 81       	ldd	r17, Y+3	; 0x03
    3556:	aa 81       	ldd	r26, Y+2	; 0x02
    3558:	b9 81       	ldd	r27, Y+1	; 0x01
    355a:	ce 0f       	add	r28, r30
    355c:	d1 1d       	adc	r29, r1
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	de bf       	out	0x3e, r29	; 62
    3564:	0f be       	out	0x3f, r0	; 63
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	ed 01       	movw	r28, r26
    356a:	08 95       	ret

0000356c <_exit>:
    356c:	f8 94       	cli

0000356e <__stop_program>:
    356e:	ff cf       	rjmp	.-2      	; 0x356e <__stop_program>
